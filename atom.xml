<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jogen Blog</title>
  
  <subtitle>不积跬步，无以至千里；不积小流，无以成江海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bambooj.github.io/"/>
  <updated>2018-08-24T03:20:11.423Z</updated>
  <id>http://bambooj.github.io/</id>
  
  <author>
    <name>Jogen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每周分享-20180824</title>
    <link href="http://bambooj.github.io/2018/08/24/weekly-20180824/"/>
    <id>http://bambooj.github.io/2018/08/24/weekly-20180824/</id>
    <published>2018-08-24T02:27:55.000Z</published>
    <updated>2018-08-24T03:20:11.423Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-IDEA插件Statistic"><a href="#1-IDEA插件Statistic" class="headerlink" title="1. IDEA插件Statistic"></a>1. IDEA插件Statistic</h4><p> Intellij IDEA 代码统计插件 Statistic 可以快速有效地查看项目代码行数、文件数量，大小等；</p><p><img src="/img/2018/08/statistic.png" alt="/img/2018/08/statistic.png"></p><h4 id="2-Maven命令mvn-dependency-get"><a href="#2-Maven命令mvn-dependency-get" class="headerlink" title="2. Maven命令mvn dependency:get"></a>2. Maven命令mvn dependency:get</h4><p>Maven命令行下载以来Jar包命令，如 mvn dependency:get -Dverbose -Dincludes=org.hibernate:hibernate-validator。该命令可以在IDEA执行卡顿的情况下，或者需要下载的依赖包久久都没有反应。可以使用此种方法下载具体的包。其他命令如dependency:tree可以查看具体包的多个依赖，从而排除冲突的jar包。</p><h4 id="3-wc-word-count-命令"><a href="#3-wc-word-count-命令" class="headerlink" title="3. wc(word count) 命令"></a>3. wc(word count) 命令</h4><p> Linux的wc(word count)命令可以有效统计文本文件的大小，行数等；参考：<a href="https://alvinalexander.com/unix/edu/examples/wc.shtml" target="_blank" rel="noopener">https://alvinalexander.com/unix/edu/examples/wc.shtml</a></p><h4 id="4-awk文本处理工具"><a href="#4-awk文本处理工具" class="headerlink" title="4. awk文本处理工具"></a>4. awk文本处理工具</h4><p> Linux的awk是一个处理文本的强大工具；可以对文本文件执行各种操作。</p><h4 id="5-Http-客户端工具：OkHttp"><a href="#5-Http-客户端工具：OkHttp" class="headerlink" title="5. Http 客户端工具：OkHttp"></a>5. Http 客户端工具：OkHttp</h4><p> OkHttp是一个有效的Http客户端，支持多个请求公用一个主机的socket，连接池减少请求时延，透明的gzip压缩了下载的大小，响应缓存完全避免网络重复请求等特点。github上的star达到28k，具体参考<a href="http://square.github.io/okhttp/；" target="_blank" rel="noopener">http://square.github.io/okhttp/；</a></p><h4 id="6-HanLP-中文自然语言处理库"><a href="#6-HanLP-中文自然语言处理库" class="headerlink" title="6. HanLP 中文自然语言处理库"></a>6. HanLP 中文自然语言处理库</h4><p>HanLP是一个面向生产环境的自然语言处理工具包，能有效地对中文进行各种处理，包括句法分析、多种词法分析、中文分词、词性标注，命名实体识别、关键词提取，新词发现，短语提取，自动摘要，拼音简繁等。还支持自定义模型训练等。目前在github上有8k多的star，该项目由大快搜索主导并完全开源。参考 <a href="https://github.com/hankcs/HanLP。" target="_blank" rel="noopener">https://github.com/hankcs/HanLP。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-IDEA插件Statistic&quot;&gt;&lt;a href=&quot;#1-IDEA插件Statistic&quot; class=&quot;headerlink&quot; title=&quot;1. IDEA插件Statistic&quot;&gt;&lt;/a&gt;1. IDEA插件Statistic&lt;/h4&gt;&lt;p&gt; Intelli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Elasticsearch对文章进行分词统计</title>
    <link href="http://bambooj.github.io/2018/08/21/es-mapping-analysis/"/>
    <id>http://bambooj.github.io/2018/08/21/es-mapping-analysis/</id>
    <published>2018-08-21T10:22:40.000Z</published>
    <updated>2018-08-21T10:39:05.698Z</updated>
    
    <content type="html"><![CDATA[<p>需求：通过公司名称，查询公司的统一社会信用代码(企查查)；使用统一社会信用代码，调用风报(收费)接口，找到公司的裁判文书信息；返回信息格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : &quot;0533f2d0-6fc4-4f79-a5b6-bc6d33a2c3f0&quot;,</span><br><span class="line">    &quot;法院&quot; : &quot;旌德县人民法院&quot;,</span><br><span class="line">    &quot;案号&quot; : &quot;（2015）旌民二初字第00098号&quot;,</span><br><span class="line">    &quot;案由&quot; : &quot;承揽合同纠纷&quot;,</span><br><span class="line">    &quot;段落&quot; : [ </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;标签&quot; : &quot;头部&quot;,</span><br><span class="line">            &quot;内容&quot; : &quot;安徽省旌德县人民法院&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;标签&quot; : &quot;庭审程序说明&quot;,</span><br><span class="line">            &quot;内容&quot; : &quot;被告贝利公司经本院传票传唤无正当理由未到庭参加诉讼。&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;标签&quot; : &quot;庭审程序说明&quot;,</span><br><span class="line">            &quot;内容&quot; : &quot;本案现已审理终结。&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;标签&quot; : &quot;庭审过程其他&quot;,</span><br><span class="line">            &quot;内容&quot; : &quot;原告为证明其诉讼主张，向本院递交的证据，被告樊建儿的质证意见及本院的认证意见如下：&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;标签&quot; : &quot;庭审过程其他&quot;,</span><br><span class="line">            &quot;内容&quot; : &quot;2、《粉刷分项工程承包协议书》1份，证明两原告与被告贝利公司项目部签订协议，由原告分包粉刷工程，并对工程概况、范围、质量及保修、承包方式造价及付款进行了约定，明确了双方的权利义务。&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;标签&quot; : &quot;附件&quot;,</span><br><span class="line">            &quot;内容&quot; : &quot;第一百四十四条被告经传票传唤，无正当理由拒不到庭的，或者未法庭许可中途退庭的，可以缺席判决。&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;当事人&quot; : [ </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;其他角色&quot; : [],</span><br><span class="line">            &quot;名字&quot; : &quot;建儿&quot;,</span><br><span class="line">            &quot;判决结果&quot; : &quot;败诉&quot;,</span><br><span class="line">            &quot;角色&quot; : [ </span><br><span class="line">                &quot;被告&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;类型&quot; : &quot;人名&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;文书类型&quot; : &quot;判决书&quot;,</span><br><span class="line">    &quot;versions&quot; : 1,</span><br><span class="line">    &quot;发布时间&quot; : &quot;2016-03-24&quot;,</span><br><span class="line">    &quot;判决时间&quot; : &quot;2016-01-04&quot;,</span><br><span class="line">    &quot;统一社会信用代码&quot; : &quot;91330110143843494L&quot;,</span><br><span class="line">    &quot;标题&quot; : &quot;AAA与贝利建设集团有限公司合同纠纷一审民事判决书&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要对“段落.内容”进行分析。</p><h3 id="一、-公司对于的社会统一信用代码"><a href="#一、-公司对于的社会统一信用代码" class="headerlink" title="一、 公司对于的社会统一信用代码"></a>一、 公司对于的社会统一信用代码</h3><p>公司名称                    统一社会信用代码<br>中建二局第一建筑工程有限公司：91110000104341301L<br>浙江贝利                   ：91330110143843494L<br>河北太行建筑安装工程有限公司：91130606700751737C</p><h3 id="二、-给“段落-标签”字段建立映射，使用中文ik-analyzer分词"><a href="#二、-给“段落-标签”字段建立映射，使用中文ik-analyzer分词" class="headerlink" title="二、 给“段落.标签”字段建立映射，使用中文ik_analyzer分词"></a>二、 给“段落.标签”字段建立映射，使用中文ik_analyzer分词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &quot;localhost:9200/abs_enterprise_info&quot; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">   &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;cpws&quot;:&#123;</span><br><span class="line">       &quot;properties&quot;:&#123;</span><br><span class="line">            &quot;段落&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">                &quot;properties&quot;:&#123;</span><br><span class="line">                    &quot;内容&quot;: &#123;</span><br><span class="line">                       &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">                        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                        &quot;fielddata&quot;:&quot;true&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><p>建立完映射，可以对其进行分析，测试如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;localhost:9200/abs_enterprise_info/_analysis?pretty&quot; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;field&quot;: &quot;段落.内容&quot;,</span><br><span class="line">    &quot;tags&quot;: &quot;上诉人深圳市明之辉建设工程有限公司（以下简称“明之辉公司”）因与被上诉人杨光权承揽合同纠纷一案，明之辉公司不服贵州省余庆县人民法院（2017）黔0329民初1802号民事判决，向本院提起上诉，本院于2018年1月5日立案受理后，依法组成合议庭审理了本案，本案现已审理终结。&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><h3 id="三、-通过“统一社会信用代码”，查询符合的记录数（如有100条数据），再对其进行词频统计"><a href="#三、-通过“统一社会信用代码”，查询符合的记录数（如有100条数据），再对其进行词频统计" class="headerlink" title="三、 通过“统一社会信用代码”，查询符合的记录数（如有100条数据），再对其进行词频统计"></a>三、 通过“统一社会信用代码”，查询符合的记录数（如有100条数据），再对其进行词频统计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;localhost:9200/abs_enterprise_info/_search?pretty&quot; -o 91130606700751737C.txt -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">            &quot;统一社会信用代码&quot;: &quot;91130606700751737C&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;size&quot;: 0,</span><br><span class="line">    &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;messages&quot;: &#123;</span><br><span class="line">            &quot;terms&quot;: &#123;</span><br><span class="line">                &quot;size&quot;: 10,</span><br><span class="line">                &quot;field&quot;: &quot;段落.内容&quot;,</span><br><span class="line">                &quot;include&quot;:&quot;[\u4E00-\u9FA5]&#123;2,6&#125;&quot;,</span><br><span class="line">                &quot;exclude&quot; : &quot;.*百.*|.*人.*|.*市.*|.*一.*|.*二.*|.*三.*|.*四.*|.*五.*|.*六.*|.*七.*|.*八.*|.*九.*|.*十.*&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><ul><li>include：包含2-6个中文单词的bucket key；过滤key少于两个汉子的数据的方法，参考：<a href="http://www.mamicode.com/info-detail-1669192.html；" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-1669192.html；</a></li><li>excude: 通过正则表达式过滤掉一部分数据，注：过滤太多程序无法解析，会出现错误；</li><li>-o:将结果输入到文件91130606700751737C.txt中；<br>输出结果的格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 174,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 5,</span><br><span class="line">    &quot;successful&quot; : 5,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 31,</span><br><span class="line">    &quot;max_score&quot; : 0.0,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot; : &#123;</span><br><span class="line">    &quot;messages&quot; : &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot; : 21,</span><br><span class="line">      &quot;sum_other_doc_count&quot; : 4102,</span><br><span class="line">      &quot;buckets&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;依照&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 28</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;太行&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 27</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;如下&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 27</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;工程&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 27</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;建筑安装&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 27</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;有限公司&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 27</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;本院&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 27</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;民事诉讼法&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 27</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;河北&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 27</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot; : &quot;原告&quot;,</span><br><span class="line">          &quot;doc_count&quot; : 25</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果想对某一类数据进行分析，可以使用query.bool：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;localhost:9200/abs_enterprise_info/_search?pretty&quot; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;must&quot;:&#123;&quot;match&quot;:&#123;&quot;统一社会信用代码&quot;: &quot;91330110143843494L&quot;&#125;&#125;,</span><br><span class="line">            &quot;must&quot;:&#123;&quot;match&quot;:&#123;&quot;案由&quot;: &quot;建设工程施工合同纠纷&quot;&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><h3 id="四、-使用awk对输出到文件的内容进一步处理，执行"><a href="#四、-使用awk对输出到文件的内容进一步处理，执行" class="headerlink" title="四、 使用awk对输出到文件的内容进一步处理，执行:"></a>四、 使用awk对输出到文件的内容进一步处理，执行:</h3><p>awk -F”:” ‘{if($1~/key/) print $2}’ 91130606700751737C.txt &gt; 91130606700751737C_tag.txt<br>只保留中文关键字,并将结果放到新的文件中(如：91130606700751737C_tag.txt)</p><h3 id="五、-去掉双引号-F”-””，并去掉换行符printf"><a href="#五、-去掉双引号-F”-””，并去掉换行符printf" class="headerlink" title="五、 去掉双引号-F”\””，并去掉换行符printf"></a>五、 去掉双引号-F”\””，并去掉换行符printf</h3><blockquote><p>awk -F”\”” ‘{printf $2 $3}’ 91130606700751737C_tag.txt</p></blockquote><h3 id="六、-过滤掉一部分数据，如过滤包含”高”，”区”，”都”，”这”的词条，这个是在未取消换行的时候执行的"><a href="#六、-过滤掉一部分数据，如过滤包含”高”，”区”，”都”，”这”的词条，这个是在未取消换行的时候执行的" class="headerlink" title="六、 过滤掉一部分数据，如过滤包含”高”，”区”，”都”，”这”的词条，这个是在未取消换行的时候执行的"></a>六、 过滤掉一部分数据，如过滤包含”高”，”区”，”都”，”这”的词条，这个是在未取消换行的时候执行的</h3><blockquote><p>awk ‘{if(!($0~/高|区|都|这/)) print $0}’ 91130606700751737C_tag.txt</p></blockquote><p>或</p><blockquote><p>awk ‘{if($0!~/高|区|都|这/) print $0}’ awkt2.txt</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需求：通过公司名称，查询公司的统一社会信用代码(企查查)；使用统一社会信用代码，调用风报(收费)接口，找到公司的裁判文书信息；返回信息格式如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch中文全文检索</title>
    <link href="http://bambooj.github.io/2018/08/08/elasticsearch-fulltext-01/"/>
    <id>http://bambooj.github.io/2018/08/08/elasticsearch-fulltext-01/</id>
    <published>2018-08-08T14:59:41.000Z</published>
    <updated>2018-08-21T10:16:57.731Z</updated>
    
    <content type="html"><![CDATA[<p>前提：安装好ik-analyze</p><h3 id="1-创建index"><a href="#1-创建index" class="headerlink" title="1. 创建index"></a>1. 创建index</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT http://localhost:9200/poetry</span><br></pre></td></tr></table></figure><p>查询索引：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET http://localhost:9200/indices</span><br></pre></td></tr></table></figure></p><p>查询结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexin@hexin:~/test/es$ curl localhost:9200/_cat/indices?pretty</span><br><span class="line">green open poetry                        XxSNsdRLSxifRwg22Ezn6Q 5 1     0   0    810b   324b</span><br></pre></td></tr></table></figure></p><h3 id="2-创建type的mapping。"><a href="#2-创建type的mapping。" class="headerlink" title="2. 创建type的mapping。"></a>2. 创建type的mapping。</h3><p>查看index（或者map下面的type）的mapping<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl -XPOST http://localhost:9200/poetry/fulltext/_mapping -H &apos;Content-Type:application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;content&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">                &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>查看映射<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:9200/poetry/_mapping?pretty</span><br></pre></td></tr></table></figure></p><p>查询结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;poetry&quot; : &#123;</span><br><span class="line">    &quot;mappings&quot; : &#123;</span><br><span class="line">      &quot;fulltext&quot; : &#123;</span><br><span class="line">        &quot;properties&quot; : &#123;</span><br><span class="line">          &quot;content&quot; : &#123;</span><br><span class="line">            &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">            &quot;analyzer&quot; : &quot;ik_max_word&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3. 插入数据"></a>3. 插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://localhost:9200/poetry/fulltext/1 -H &apos;Content-Type:application/json&apos; -d&apos;</span><br><span class="line">&#123;&quot;content&quot;:&quot;轻轻的我走了，正如我轻轻的来&quot;&#125;</span><br><span class="line">&apos;</span><br><span class="line"></span><br><span class="line">curl -XPOST http://localhost:9200/poetry/fulltext/2 -H &apos;Content-Type:application/json&apos; -d&apos;</span><br><span class="line">&#123;&quot;content&quot;:&quot;我轻轻的招手，作别西天的云彩&quot;&#125;</span><br><span class="line">&apos;</span><br><span class="line"></span><br><span class="line">curl -XPOST http://localhost:9200/poetry/fulltext/3 -H &apos;Content-Type:application/json&apos; -d&apos;</span><br><span class="line">&#123;&quot;content&quot;:&quot;那河畔的金柳，是夕阳中的新娘&quot;&#125;</span><br><span class="line">&apos;</span><br><span class="line"></span><br><span class="line">curl -XPOST http://localhost:9200/poetry/fulltext/4 -H &apos;Content-Type:application/json&apos; -d&apos;</span><br><span class="line">&#123;&quot;content&quot;:&quot;波光里的艳影，在我的心头荡漾&quot;&#125;</span><br><span class="line">&apos;</span><br><span class="line"></span><br><span class="line">curl -XPOST http://localhost:9200/poetry/fulltext/5 -H &apos;Content-Type:application/json&apos; -d&apos;</span><br><span class="line">&#123;&quot;content&quot;:&quot;在康河的柔波里，我甘心做一条水草&quot;&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure><h3 id="4-测试分词"><a href="#4-测试分词" class="headerlink" title="4. 测试分词"></a>4. 测试分词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200/poetry/_analyze?pretty&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;: &quot;content&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;曾经沧海难为水，除却巫山不是云&quot; </span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;曾经沧海难为水&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;曾经沧海&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 4,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;曾经&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;沧海&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 4,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;海难&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 3,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;难为&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 4,</span><br><span class="line">      &quot;end_offset&quot; : 6,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 5</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;水&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 6</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;除却巫山不是云&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 8,</span><br><span class="line">      &quot;end_offset&quot; : 15,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 7</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;除却&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 8,</span><br><span class="line">      &quot;end_offset&quot; : 10,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 8</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;巫山&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 10,</span><br><span class="line">      &quot;end_offset&quot; : 12,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 9</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;不是&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 12,</span><br><span class="line">      &quot;end_offset&quot; : 14,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 10</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;云&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 14,</span><br><span class="line">      &quot;end_offset&quot; : 15,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 11</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-检索数据"><a href="#5-检索数据" class="headerlink" title="5. 检索数据"></a>5. 检索数据</h3><p>   4.1 简单检索</p><pre><code>curl localhost:9200/poetry/_search?pretty</code></pre><p>   4.2 全文检索</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://localhost:9200/poetry/fulltext/_search?pretty  -H &apos;Content-Type:application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;content&quot; : &quot;轻轻&quot; &#125;&#125;,</span><br><span class="line">    &quot;highlight&quot; : &#123;</span><br><span class="line">&quot;pre_tags&quot; : [&quot;&lt;tag1&gt;&quot;, &quot;&lt;tag2&gt;&quot;],</span><br><span class="line">&quot;post_tags&quot; : [&quot;&lt;/tag1&gt;&quot;, &quot;&lt;/tag2&gt;&quot;],</span><br><span class="line">&quot;fields&quot; : &#123;</span><br><span class="line">    &quot;content&quot; : &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure></code></pre><p>   4.2 聚合查询</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前提：安装好ik-analyze&lt;/p&gt;
&lt;h3 id=&quot;1-创建index&quot;&gt;&lt;a href=&quot;#1-创建index&quot; class=&quot;headerlink&quot; title=&quot;1. 创建index&quot;&gt;&lt;/a&gt;1. 创建index&lt;/h3&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>将MongoDB数据加载到Elasticsearch</title>
    <link href="http://bambooj.github.io/2018/08/03/transport-data-from-mongo-to-es/"/>
    <id>http://bambooj.github.io/2018/08/03/transport-data-from-mongo-to-es/</id>
    <published>2018-08-03T14:32:52.000Z</published>
    <updated>2018-08-07T06:10:34.196Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>  由于业务需要，需要将放在MongoDB的数据加载到Elasticsearch，Elasticsearch天生具有全文检索优势。MongoDB虽然新的版本也支持fulltext，但目前尚未支持中文。所以这里我们就用比较流行的Elasticsearch。<br>另外，为了方便，我会基于Docker搭建MongoDB和Elasticsearch集群</p><h3 id="二、docker的安装和使用"><a href="#二、docker的安装和使用" class="headerlink" title="二、docker的安装和使用"></a>二、docker的安装和使用</h3><p>环境：Ubuntu 16.04.5 LTS</p><h4 id="2-1-如果存在旧版本docker，先删除旧版本"><a href="#2-1-如果存在旧版本docker，先删除旧版本" class="headerlink" title="2.1 如果存在旧版本docker，先删除旧版本"></a>2.1 如果存在旧版本docker，先删除旧版本</h4><p>$ sudo apt-get remove docker docker-engine docker.io</p><h4 id="2-2-更新apt-get"><a href="#2-2-更新apt-get" class="headerlink" title="2.2 更新apt-get"></a>2.2 更新apt-get</h4><p>$sudo apt-get update</p><h4 id="2-3-添加docker官方-GPG-key"><a href="#2-3-添加docker官方-GPG-key" class="headerlink" title="2.3 添加docker官方 GPG key"></a>2.3 添加docker官方 GPG key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">pub   4096R/0EBFCD88 2017-02-22</span><br><span class="line">      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   4096R/F273FCD8 2017-02-22</span><br></pre></td></tr></table></figure><h4 id="2-4-安装docker"><a href="#2-4-安装docker" class="headerlink" title="2.4 安装docker"></a>2.4 安装docker</h4><blockquote><p>$ sudo apt-get install docker-ce</p></blockquote><p>至此，docker已经安装完成，直接输入docker命令可查看docker的帮助，如命令docker version查看docker版本信息</p><p>参考：<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1</a></p><h3 id="三、搭建MongoDB服务"><a href="#三、搭建MongoDB服务" class="headerlink" title="三、搭建MongoDB服务"></a>三、搭建MongoDB服务</h3><p>这里我们就直接使用docker仓库的mongodb镜像。</p><h4 id="3-1-查询mongodb镜像"><a href="#3-1-查询mongodb镜像" class="headerlink" title="3.1 查询mongodb镜像"></a>3.1 查询mongodb镜像</h4><p>jogen@mymachine:~/test/es$ docker search mongo<br>NAME                                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED<br>mongo                               MongoDB document databases provide high avai…   4773                [OK]<br>mongo-express                       Web-based MongoDB admin interface, written w…   274                 [OK]                </p><h4 id="3-2-docker-pull拉取镜像"><a href="#3-2-docker-pull拉取镜像" class="headerlink" title="3.2 docker pull拉取镜像"></a>3.2 docker pull拉取镜像</h4><p>$docker pull mongo</p><h4 id="3-3-从docker镜像安装mongo"><a href="#3-3-从docker镜像安装mongo" class="headerlink" title="3.3 从docker镜像安装mongo"></a>3.3 从docker镜像安装mongo</h4><p> docker run –name mongodb2 -p 27018:27017 -d mongo –replSet mongoReplSet<br>–replSet：添加复制集<br>查看复制机状态：rs.status()<br>查看配置：rs.conf()<br>初始化：rs.initiate()<br>修改配置：rs.reconfig(cfg),具体使用可以查看官网文档，我们这里会修改主机名为ip地址。</p><h4 id="3-4-使用mongodb-compass"><a href="#3-4-使用mongodb-compass" class="headerlink" title="3.4 使用mongodb-compass"></a>3.4 使用mongodb-compass</h4><p>mongodb-compass：是mongodb的可视化工具，访问mongodb比较方便，这里使用到了它的数据导入导出功能，该工具比较方便。<br>当然RobotT3也比较好用，但是我找不到数据导入导出功能。</p><h4 id="3-5-建立database和collection，并导入一些数据。"><a href="#3-5-建立database和collection，并导入一些数据。" class="headerlink" title="3.5 建立database和collection，并导入一些数据。"></a>3.5 建立database和collection，并导入一些数据。</h4><h3 id="四、搭建Elastisearch集群服务"><a href="#四、搭建Elastisearch集群服务" class="headerlink" title="四、搭建Elastisearch集群服务"></a>四、搭建Elastisearch集群服务</h3><h4 id="4-1-查询镜像"><a href="#4-1-查询镜像" class="headerlink" title="4.1 查询镜像"></a>4.1 查询镜像</h4><blockquote><p>docker search elastisearch</p></blockquote><h4 id="4-2-拉取镜像到本地"><a href="#4-2-拉取镜像到本地" class="headerlink" title="4.2 拉取镜像到本地"></a>4.2 拉取镜像到本地</h4><blockquote><p>docker pull docker.elastic.co/elasticsearch/elasticsearch:5.6.10</p></blockquote><p>docker官方中央仓库维护的es已经不再维护，elastic已经自己建立了自己的私有库，并维护。</p><p>docker官方仓库的elastic镜像地址：<a href="https://hub.docker.com/_/elasticsearch/" target="_blank" rel="noopener">https://hub.docker.com/_/elasticsearch/</a>, elastic6版本之后的，都放在elastic自己的docker仓库维护了。<br>elastic的仓库是：<a href="https://www.docker.elastic.co/" target="_blank" rel="noopener">https://www.docker.elastic.co/</a></p><h4 id="4-3-使用安装docker-compose"><a href="#4-3-使用安装docker-compose" class="headerlink" title="4.3 使用安装docker-compose"></a>4.3 使用安装docker-compose</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">$ docker-compose --version</span><br></pre></td></tr></table></figure><p>参考：<a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">https://docs.docker.com/compose/install/#install-compose</a></p><h4 id="4-4-创建docker-compose-yml文件"><a href="#4-4-创建docker-compose-yml文件" class="headerlink" title="4.4 创建docker-compose.yml文件"></a>4.4 创建docker-compose.yml文件</h4><p>本地新建一个目录，如elastictest，存放自己的项目项目信息，docker-compose.yml也放在里面，其内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;2&apos;</span><br><span class="line">services:</span><br><span class="line">  elasticsearch1:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.10</span><br><span class="line">    container_name: elasticsearch1</span><br><span class="line">    environment:</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - xpack.security.enabled=false</span><br><span class="line">      - bootstrap.memory_lock=true</span><br><span class="line">      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    mem_limit: 1g</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata1:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line">  elasticsearch2:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.10</span><br><span class="line">    environment:</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - xpack.security.enabled=false</span><br><span class="line">      - bootstrap.memory_lock=true</span><br><span class="line">      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br><span class="line">      - &quot;discovery.zen.ping.unicast.hosts=elasticsearch1&quot;</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    mem_limit: 1g</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata2:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  esdata1:</span><br><span class="line">    driver: local</span><br><span class="line">  esdata2:</span><br><span class="line">    driver: local</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  esnet:</span><br></pre></td></tr></table></figure></p><p>说明： - xpack.security.enabled=false 配置这个，是因为docker中的elasticsearch默认安装了x-path插件，该插件在我们访问es时需要输入账号密码（默认是elastic/changeme），在数据同步的时候可能会比较麻烦.</p><h4 id="4-5-启动服务"><a href="#4-5-启动服务" class="headerlink" title="4.5 启动服务"></a>4.5 启动服务</h4><p>docker-compose up</p><h4 id="4-6-安装elasticsearch-head扩展插件"><a href="#4-6-安装elasticsearch-head扩展插件" class="headerlink" title="4.6 安装elasticsearch-head扩展插件"></a>4.6 安装elasticsearch-head扩展插件</h4><p>ElasticSearch-Head插件有助于查看和管理es集群，有多种安装方式，可以参考：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a><br>我这里是使用chrome扩展方式，比较方便。<br>进入chrome的Web-store，搜索ElasticSearch Head并安装</p><h4 id="4-7-访问集群"><a href="#4-7-访问集群" class="headerlink" title="4.7 访问集群"></a>4.7 访问集群</h4><p>es集群启动好之后，通过head插件访问结果如下：</p><h3 id="五、使用Transporter传输数据"><a href="#五、使用Transporter传输数据" class="headerlink" title="五、使用Transporter传输数据"></a>五、使用Transporter传输数据</h3><p>现在MongoDB和ES集群都已经启动起来了，接下来就是数据同步的问题，从MongoDB到ElasticSearch的同步有多种方式：</p><pre><code>1. mongo-connector：2. logstach3. Transporter4. elasticsearch-river-mongodb5. Mongoosastic</code></pre><p>具体的区别可参考：<a href="https://code.likeagirl.io/5-different-ways-to-synchronize-data-from-mongodb-to-elasticsearch-d8456b83d44f" target="_blank" rel="noopener">https://code.likeagirl.io/5-different-ways-to-synchronize-data-from-mongodb-to-elasticsearch-d8456b83d44f</a><br>一开始，我使用的是mongo-connector方式，但只支持es5.x版本，到目前位置，尚未支持es6.x。一个原因可能是es更新太快，mongo-connector已经力不从心。我们从github上看到，已经半年没有更新了，一个致命的点就是跟es的版本强相关。所以我上面docker镜像也是使用的5.x版本的原因。其实目前es已经到6.3.2版本了。<br>此外，在使用mongo-connector过程中，需要用到elastic2_doc_manager中间组件，运行时经常同步不了数据，一运行同步程序，就卡主，没有任何日志输出。这让人难以接受。于是就想尝试使用tansporter。</p><p>transporter的使用参考：<a href="https://github.com/compose/transporter" target="_blank" rel="noopener">https://github.com/compose/transporter</a><br>这里列出主要步骤：</p><ol><li><p>下载transporter客户端<br><a href="https://github.com/compose/transporter/releases/download/v0.5.2/transporter-0.5.2-linux-amd64" target="_blank" rel="noopener">https://github.com/compose/transporter/releases/download/v0.5.2/transporter-0.5.2-linux-amd64</a><br>添加执行权限：chmod +x transporter-0.5.2-linux-amd64<br>修改名称：mv transporter-0.5.2-linux-amd64 transporter<br>发送到、/usr/bin 目录，以供全局使用：mv transporter /usr/bin</p></li><li><p>transporter初始化<br>在项目目录elastictest执行：transporter init mongodb elasticsearch<br>执行完后，在本地生成一个pipline.js文件，文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var source = mongodb(&#123;</span><br><span class="line">  &quot;uri&quot;: &quot;mongodb://127.0.0.1:27017/enterprise&quot;</span><br><span class="line">  // &quot;timeout&quot;: &quot;30s&quot;,</span><br><span class="line">  // &quot;tail&quot;: false,</span><br><span class="line">  // &quot;ssl&quot;: false,</span><br><span class="line">  // &quot;cacerts&quot;: [&quot;/path/to/cert.pem&quot;],</span><br><span class="line">  // &quot;wc&quot;: 1,</span><br><span class="line">  // &quot;fsync&quot;: false,</span><br><span class="line">  // &quot;bulk&quot;: false,</span><br><span class="line">  // &quot;collection_filters&quot;: &quot;&#123;&#125;&quot;,</span><br><span class="line">  // &quot;read_preference&quot;: &quot;Primary&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var sink = elasticsearch(&#123;</span><br><span class="line">  &quot;uri&quot;: &quot;http://localhost:9200/enterprise&quot;</span><br><span class="line">  // &quot;timeout&quot;: &quot;10s&quot;, // defaults to 30s</span><br><span class="line">  // &quot;aws_access_key&quot;: &quot;ABCDEF&quot;, // used for signing requests to AWS Elasticsearch service</span><br><span class="line">  // &quot;aws_access_secret&quot;: &quot;ABCDEF&quot; // used for signing requests to AWS Elasticsearch service</span><br><span class="line">  // &quot;parent_id&quot;: &quot;elastic_parent&quot; // defaults to &quot;elastic_parent&quot; parent identifier for Elasticsearch</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.Source(&quot;source&quot;, source, &quot;/.*/&quot;).Save(&quot;sink&quot;, sink, &quot;/.*/&quot;)</span><br></pre></td></tr></table></figure></li></ol><p>住需要修改两个地方的uri，这里我已经修改了。</p><ol start="3"><li>执行数据同步<br>transporter run<br>到此数据同步完成，可以开心地打开head扩展插件查看同步结果了。</li></ol><p>可以参考：<a href="https://aboullaite.me/sync-data-from-mongodb-to-elasticsearch-using-transporter/" target="_blank" rel="noopener">https://aboullaite.me/sync-data-from-mongodb-to-elasticsearch-using-transporter/</a></p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>在实践过程中还是需要多尝试，使用mongo-connector的过程中，甚至出现需要去直接修改源码的情况，比如请求过程中的headers缺少了Content-Type，需要手动添加进去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;  由于业务需要，需要将放在MongoDB的数据加载到Elasticsearch，Elasticsearch天生具有全文检索
      
    
    </summary>
    
    
      <category term="MongoDB,Docker,Elasticsearch" scheme="http://bambooj.github.io/tags/MongoDB-Docker-Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>使用ssh-keygen实现免密登录服务器</title>
    <link href="http://bambooj.github.io/2018/07/26/ssh-keygen/"/>
    <id>http://bambooj.github.io/2018/07/26/ssh-keygen/</id>
    <published>2018-07-26T14:19:31.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.cnblogs.com/dream-to-pku/p/7049760.html" target="_blank" rel="noopener">https://www.cnblogs.com/dream-to-pku/p/7049760.html</a></p><h3 id="一、目标：免密登陆服务器"><a href="#一、目标：免密登陆服务器" class="headerlink" title="一、目标：免密登陆服务器"></a>一、目标：免密登陆服务器</h3><p>有两台服务器，分别为web12和web13，需要实现web12免密码登录web13<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.12    web12</span><br><span class="line">192.168.1.13    web13</span><br></pre></td></tr></table></figure></p><h3 id="二、生成公钥私钥对"><a href="#二、生成公钥私钥对" class="headerlink" title="二、生成公钥私钥对"></a>二、生成公钥私钥对</h3><p>web12在用户（假设为root）目录下执行命令: </p><blockquote><p>ssh-keygen -t rsa,</p></blockquote><p>或者直接执行ssh-keygen命令（默认使用的也是rsa加密类型）。<br>此时会在当前目录下生成.ssh文件夹，里面有公钥（id_rsa.pub）和秘钥(id_rsa)</p><h3 id="三、在web13上也用同样的方式生成公钥和秘钥"><a href="#三、在web13上也用同样的方式生成公钥和秘钥" class="headerlink" title="三、在web13上也用同样的方式生成公钥和秘钥"></a>三、在web13上也用同样的方式生成公钥和秘钥</h3><h3 id="四、修改配置文件"><a href="#四、修改配置文件" class="headerlink" title="四、修改配置文件"></a>四、修改配置文件</h3><p>在web13上，查看/etc/ssh/sshd_config文件，找到：</p><blockquote><p>AuthorizedKeysFile      .ssh/authorized_keys</p></blockquote><p>如果没有需要加上。</p><h3 id="五、提交公钥到服务器"><a href="#五、提交公钥到服务器" class="headerlink" title="五、提交公钥到服务器"></a>五、提交公钥到服务器</h3><p>web12上执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys #把公钥复制到文件authorized_keys中</span><br><span class="line">chmod 600 authorized_keys #修改文件权限，否则可能会无法登录</span><br><span class="line">scp authorized_keys root@45.77.43.6:/root/.ssh/#将web12上生成的公钥信息拷贝到主服务器上，主服务器配置了sshd_config，认证文件指向了authorized_keys文件。</span><br></pre></td></tr></table></figure></p><h3 id="六、执行免密登陆"><a href="#六、执行免密登陆" class="headerlink" title="六、执行免密登陆"></a>六、执行免密登陆</h3><p>在web12上执行：</p><blockquote><p>ssh <a href="mailto:root@45.77.43.6" target="_blank" rel="noopener">root@45.77.43.6</a> </p></blockquote><p>验证是否已经实现了免密登录，正常来说是可以了的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://www.cnblogs.com/dream-to-pku/p/7049760.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/dream-to-pku/p/70
      
    
    </summary>
    
    
      <category term="linux" scheme="http://bambooj.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS安装google-chrome</title>
    <link href="http://bambooj.github.io/2018/07/25/centos-google-chrome/"/>
    <id>http://bambooj.github.io/2018/07/25/centos-google-chrome/</id>
    <published>2018-07-25T14:19:39.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、写这篇文章的原因"><a href="#一、写这篇文章的原因" class="headerlink" title="一、写这篇文章的原因"></a>一、写这篇文章的原因</h3><p>最近在写爬虫，需要解析动态页面数据，不能够直接请求接口，接口有经过复杂的加密。解析动态页面需要用到浏览器的支持，有三个浏览器可以使用：<br>chrome<br>firefox<br>PhantomJS<br>由于firefox解析的时候，部分页面没有会乱，如在获取验证码的位置时获取不到，而验证码的页面是嵌套在iframe下面的。而PhantomJS已经不再支持，官方建议使用chrome和firefox。基于以上情况，我选择使用google的chrome无头浏览器。</p><h3 id="二、google-chrome无头浏览器"><a href="#二、google-chrome无头浏览器" class="headerlink" title="二、google-chrome无头浏览器"></a>二、google-chrome无头浏览器</h3><p>使用参考：<a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="noopener">https://developers.google.com/web/updates/2017/04/headless-chrome</a></p><h3 id="三、google-chrome的安装"><a href="#三、google-chrome的安装" class="headerlink" title="三、google-chrome的安装"></a>三、google-chrome的安装</h3><p>由于爬虫应用需要放在CentOS服务器上，因此需要在CentOS安装google-chrome。安装过程参考<br>配置yum源</p><ol><li>在/etc/apt/sources.list加上<br>deb [arch=amd64] <a href="http://dl.google.com/linux/chrome/deb/" target="_blank" rel="noopener">http://dl.google.com/linux/chrome/deb/</a> stable main</li><li>执行<br>wget <a href="https://dl.google.com/linux/linux_signing_key.pub" target="_blank" rel="noopener">https://dl.google.com/linux/linux_signing_key.pub</a></li><li>执行<br>sudo apt-key add linux_signing_key.pub</li><li>执行<ul><li>sudo apt update</li><li>sudo apt install google-chrome-stable</li></ul></li></ol><p>参考：<a href="https://www.linuxbabe.com/ubuntu/install-google-chrome-ubuntu-16-04-lts" target="_blank" rel="noopener">https://www.linuxbabe.com/ubuntu/install-google-chrome-ubuntu-16-04-lts</a></p><h4 id="四、报错："><a href="#四、报错：" class="headerlink" title="四、报错："></a>四、报错：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Transaction Summary</span><br><span class="line">===================================================================================================================</span><br><span class="line">Install  1 Package (+37 Dependent packages)</span><br><span class="line"></span><br><span class="line">Total size: 71 M</span><br><span class="line">Installed size: 236 M</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">warning: /var/cache/yum/x86_64/7/google-chrome/packages/google-chrome-stable-67.0.3396.99-1.x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID 7fac5991: NOKEY</span><br><span class="line">Retrieving key from https://dl-ssl.google.com/linux/linux_signing_key.pub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GPG key retrieval failed: [Errno 14] curl#7 - "Failed to connect to 2404:6800:4008:c02::be: Network is unreachable"</span><br><span class="line">[root@reptile v2ray]#</span><br></pre></td></tr></table></figure><p>通过报错信息，我们知道是无法下载 <a href="https://dl-ssl.google.com/linux/linux_signing_key.pub文件，我们的CentOS是没有做翻墙的，所以无法安装。" target="_blank" rel="noopener">https://dl-ssl.google.com/linux/linux_signing_key.pub文件，我们的CentOS是没有做翻墙的，所以无法安装。</a><br>解决办法</p><ol><li><p>需要先在可以翻墙的机器（我本地开发机就安装了ssr翻墙）下载这个文件，然后再scp拷贝到我们的服务器上。</p><blockquote><p>wget <a href="https://dl-ssl.google.com/linux/linux_signing_key.pub" target="_blank" rel="noopener">https://dl-ssl.google.com/linux/linux_signing_key.pub</a></p></blockquote></li><li><p>拷贝到CentOS后，执行如下命令。</p><blockquote><p>rpm –import linux_signing_key.pub</p></blockquote></li><li>校验是否已经正确import<blockquote><p>rpm -qi gpg-pubkey-7fac5991-*  </p></blockquote></li></ol><p>参考：<a href="https://blog.csdn.net/knityster/article/details/6312498" target="_blank" rel="noopener">https://blog.csdn.net/knityster/article/details/6312498</a></p><p>到此准备工作已经完成</p><h4 id="五、正式安装，执行命令"><a href="#五、正式安装，执行命令" class="headerlink" title="五、正式安装，执行命令"></a>五、正式安装，执行命令</h4><p>yum install -y google-chrome-stable</p><p>安装完成后，校验是否安装成功：</p><blockquote><p>google-chrome –no-sandbox –headless –disable-gpu –screenshot <a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></p></blockquote><p>执行完后，在当前目录生成一个png文件。就是baidu首页的截图</p><h3 id="六、其他："><a href="#六、其他：" class="headerlink" title="六、其他："></a>六、其他：</h3><p>安装firefox无头浏览器参考：<br><a href="https://developer.mozilla.org/en-US/Firefox/Headless_mode" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Firefox/Headless_mode</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、写这篇文章的原因&quot;&gt;&lt;a href=&quot;#一、写这篇文章的原因&quot; class=&quot;headerlink&quot; title=&quot;一、写这篇文章的原因&quot;&gt;&lt;/a&gt;一、写这篇文章的原因&lt;/h3&gt;&lt;p&gt;最近在写爬虫，需要解析动态页面数据，不能够直接请求接口，接口有经过复杂的加密
      
    
    </summary>
    
    
      <category term="google-chrome" scheme="http://bambooj.github.io/tags/google-chrome/"/>
    
  </entry>
  
  <entry>
    <title>mysql-logic-graph</title>
    <link href="http://bambooj.github.io/2018/04/05/mysql-logic-graph/"/>
    <id>http://bambooj.github.io/2018/04/05/mysql-logic-graph/</id>
    <published>2018-04-05T05:12:29.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑架构图"><a href="#逻辑架构图" class="headerlink" title="逻辑架构图"></a>逻辑架构图</h1><p><img src="http://39.108.10.27/dbe9a02419558159d16e58523d29acbb?q=100" alt="http://39.108.10.27/dbe9a02419558159d16e58523d29acbb?q=100"></p><p>MySQL的逻辑架构大致可以分为三层；</p><h2 id="第一层：客户端层"><a href="#第一层：客户端层" class="headerlink" title="第一层：客户端层"></a>第一层：客户端层</h2><p>连接处理、授权认证、安全</p><h2 id="第二层：核心服务"><a href="#第二层：核心服务" class="headerlink" title="第二层：核心服务"></a>第二层：核心服务</h2><p>查询解析、分析、优化、缓存以及所有的内置函数（例如，日期、时间、数学和加密函数），所有跨存储引擎的功能都在这一层实现：视图、触发器、储存过程等。</p><h2 id="第三层：存储引擎"><a href="#第三层：存储引擎" class="headerlink" title="第三层：存储引擎"></a>第三层：存储引擎</h2><p>存储引擎负责 MySQL 中数据的存储和提取，不同存储引擎之间不会相互通信。</p><h1 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h1><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>锁类型：（Shared Lock）共享锁和（Exclusive Lock）排他锁。</p><p>共享锁也叫（Read Lock）读锁，排他锁也叫（Write Lock）写锁。</p><h2 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h2><p>（table lock）表锁和（row lock）行锁。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>数据库事务的ACID特性</p><ul><li>原子性（atomicity）</li><li>一致性(consistency)</li><li>隔离性(isolation)</li><li>持久性(durability)</li></ul><h3 id="数据库事务的隔离级别"><a href="#数据库事务的隔离级别" class="headerlink" title="数据库事务的隔离级别"></a>数据库事务的隔离级别</h3><ul><li>READ UNCOMMITED (未提交读)</li><li>READ COMMITED (提交读)；Oracle默认事务隔离级别</li><li>REPEATABLE READ (可重复读)；MySQL默认事务隔离级别</li><li>SERIALIZABLE (可串行化)</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>什么时候会发生死锁：</p><ol><li>当多个事务试图以不同的顺序锁定资源时，就可能会产生死锁；</li><li>多个事务同时锁定统一资源时，也会产生死锁。</li></ol><p>处理办法：</p><ol><li>死锁检测；数据库系统实现了各种死锁检测和死锁超时机制。</li><li><p>InnoDB处理死锁方式:将持有最少行级排它锁的事务进行回滚。</p><p> 锁的行为和顺序是和存储引擎相关的。</p><h2 id="多并发版本控制"><a href="#多并发版本控制" class="headerlink" title="多并发版本控制"></a>多并发版本控制</h2><p>MySQL的大多数存储引擎实现的都不是简单的行级锁。基于提升并发性能的思考，他们一般实现了多版本并发控制（MVCC）。</p></li></ol><p>InnoDB 的 MVCC，是通过在每行记录后面保存两个隐藏的列来实现的。</p><h2 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a>MySQL存储引擎</h2><p>常用的有两个</p><ul><li>InnoDB 存储引擎</li><li>MyISAM 存储引擎。MySQL5.1 及之前的版本，MyISAM是默认的存储引擎。</li></ul><p>MyISAM 特点：提供全文索引、压缩、空间函数（GIS）等；不支持事务和行级锁；崩溃后无法安全恢复。</p><p>其他内建存储引擎：Archive、Blackhole、Federated、Memory、Merge、NDB等<br>第三方存储引擎：OLTP类引擎、面向列的存储引擎、社区存储引擎</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逻辑架构图&quot;&gt;&lt;a href=&quot;#逻辑架构图&quot; class=&quot;headerlink&quot; title=&quot;逻辑架构图&quot;&gt;&lt;/a&gt;逻辑架构图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://39.108.10.27/dbe9a02419558159d16e58523d29
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>memcached的安装和使用（单点）</title>
    <link href="http://bambooj.github.io/2017/07/22/memcached/"/>
    <id>http://bambooj.github.io/2017/07/22/memcached/</id>
    <published>2017-07-22T15:18:12.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>Linux安装memcached</p><h4 id="一、Memcached的安装：使用命令安装"><a href="#一、Memcached的安装：使用命令安装" class="headerlink" title="一、Memcached的安装：使用命令安装"></a>一、Memcached的安装：使用命令安装</h4><ol><li><p>使用命令安装<br>安装时，会自动安装memcached的依赖libevent。libevent是memcached的通信模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install memcached</span><br></pre></td></tr></table></figure></li><li><p>启动memcached服务<br>安装完成后，可以使用<strong>find / -name memcached</strong>命令查询memcached存放的目录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz96tljwj636zfkf3wvqz ~]# find / -name memcached</span><br><span class="line">/etc/selinux/targeted/active/modules/<span class="number">100</span>/memcached</span><br><span class="line">/etc/sysconfig/memcached</span><br><span class="line">/usr/bin/memcached</span><br></pre></td></tr></table></figure></li></ol><p>memcached命令放在/usr/bin/目录下面，cd到/usr/bin目录，执行启动memcached服务命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memcached -d -m <span class="number">512</span> -u root  -p <span class="number">11211</span> -c <span class="number">10000</span>  -M -f <span class="number">1.1</span> -P /tmp/memcached.pid</span><br></pre></td></tr></table></figure></p><p>启动成功后，就可以在window上面<br>telnet ip 11211测试是否可以使用了。</p><p>启动memcached<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# memcached -d -m 10 -u root -l 192.168.1.75 -p 11212 -c 256 -P /tmp/memcached.pid</span><br><span class="line">[root@localhost ~]# ps -ef|grep memcached</span><br><span class="line"></span><br><span class="line">memcached -d -m <span class="number">10</span> -u root -l <span class="number">39.108</span><span class="number">.10</span><span class="number">.27</span> -p <span class="number">11212</span> -c <span class="number">256</span> -P /tmp/memcached.pid</span><br></pre></td></tr></table></figure></p><h4 id="二、memcached的使用"><a href="#二、memcached的使用" class="headerlink" title="二、memcached的使用"></a>二、memcached的使用</h4><ol><li><p>配置连接信息<br>在属性文件sys.properties中配置memcached的连接信息;如果是集群方式，这配置多个服务连接信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#memcached</span><br><span class="line"># the pool size(the number of client)</span><br><span class="line">memcached.connectionPoolSize=<span class="number">5</span></span><br><span class="line"># in this mode, when a node out, it will throws MemcachedException when call this node</span><br><span class="line">memcached.failureMode=<span class="literal">true</span></span><br><span class="line">#server1</span><br><span class="line">memcached.server1.host=<span class="number">39.108</span><span class="number">.10</span><span class="number">.27</span></span><br><span class="line">memcached.server1.port=<span class="number">11211</span></span><br><span class="line">memcached.server1.weight=<span class="number">1</span></span><br><span class="line">#server2</span><br><span class="line">#memcached.server2.host=192.168.88.141</span><br><span class="line">#memcached.server2.port=11211</span><br><span class="line">#memcached.server2.weight=1</span><br><span class="line">#server3</span><br><span class="line">#memcached.server3.host=192.168.88.142</span><br><span class="line">#memcached.server3.port=11211</span><br><span class="line">#memcached.server3.weight=1</span><br></pre></td></tr></table></figure></li><li><p>在config-cache.xml的spring配置文件中配置memcached客户端构建器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--memcached配置开始--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"memcachedClientBuilder"</span> <span class="attr">class</span>=<span class="string">"net.rubyeye.xmemcached.XMemcachedClientBuilder"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- XMemcachedClientBuilder have two arguments.First is server list,and</span></span><br><span class="line"><span class="comment">            second is weights array. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;memcached.connectionPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failureMode"</span> <span class="attr">value</span>=<span class="string">"$&#123;memcached.failureMode&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"java.net.InetSocketAddress"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;memcached.server1.host&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;memcached.server1.port&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                &lt;bean class="java.net.InetSocketAddress"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;constructor-arg&gt;</span></span><br><span class="line"><span class="comment">                        &lt;value&gt;$&#123;memcached.server2.host&#125;&lt;/value&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">                    &lt;constructor-arg&gt;</span></span><br><span class="line"><span class="comment">                        &lt;value&gt;$&#123;memcached.server2.port&#125;&lt;/value&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">                &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">                &lt;bean class="java.net.InetSocketAddress"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;constructor-arg&gt;</span></span><br><span class="line"><span class="comment">                        &lt;value&gt;$&#123;memcached.server3.host&#125;&lt;/value&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">                    &lt;constructor-arg&gt;</span></span><br><span class="line"><span class="comment">                        &lt;value&gt;$&#123;memcached.server3.port&#125;&lt;/value&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">                &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;memcached.server1.weight&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;value&gt;$&#123;memcached.server2.weight&#125;&lt;/value&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;value&gt;$&#123;memcached.server3.weight&#125;&lt;/value&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- BinaryCommandFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"commandFactory"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"net.rubyeye.xmemcached.command.BinaryCommandFactory"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transcoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"net.rubyeye.xmemcached.transcoders.SerializingTranscoder"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bufferAllocator"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"net.rubyeye.xmemcached.buffer.SimpleBufferAllocator"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Use factory bean to build memcached client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"memcachedClient"</span> <span class="attr">factory-bean</span>=<span class="string">"memcachedClientBuilder"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">factory-method</span>=<span class="string">"build"</span> <span class="attr">destroy-method</span>=<span class="string">"shutdown"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--memcached配置结束--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在java代码中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入客户端</span></span><br><span class="line">@Resource</span><br><span class="line">private MemcachedClient memcachedClient;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//在方法中使用(对缓存执行增删改查)</span></span><br><span class="line"> memcachedClient.delete(DOMAIN_TREE_ROOT_KEY);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux安装memcached&lt;/p&gt;
&lt;h4 id=&quot;一、Memcached的安装：使用命令安装&quot;&gt;&lt;a href=&quot;#一、Memcached的安装：使用命令安装&quot; class=&quot;headerlink&quot; title=&quot;一、Memcached的安装：使用命令安装&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在mac上开发ionic项目</title>
    <link href="http://bambooj.github.io/2017/07/14/ionic01/"/>
    <id>http://bambooj.github.io/2017/07/14/ionic01/</id>
    <published>2017-07-14T05:29:25.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h4><p>npm install -g cordova ionic<br>配置android sdk和java环境变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~$cat ./.bash_profile</span><br><span class="line">JAVA_HOME=<span class="regexp">/Library/</span>Java/JavaVirtualMachines/jdk1<span class="number">.7</span><span class="number">.0</span>_80.jdk/Contents/Home</span><br><span class="line">ANDROID_HOME=<span class="regexp">/Users/</span>wukangjie/Library/Android/sdk</span><br><span class="line">M2_HOME=<span class="regexp">/Users/</span>wukangjie/Documents/apache-maven<span class="number">-3.5</span><span class="number">.0</span></span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH:.:$M2_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</span><br><span class="line"><span class="keyword">export</span> JAVA_HOME</span><br><span class="line"><span class="keyword">export</span> ANDROID_HOME</span><br><span class="line"><span class="keyword">export</span> PATH</span><br><span class="line"><span class="keyword">export</span> CLASSPAT</span><br><span class="line"><span class="keyword">export</span> M2_HOME</span><br></pre></td></tr></table></figure></p><h4 id="2-创建ionic应用"><a href="#2-创建ionic应用" class="headerlink" title="2. 创建ionic应用"></a>2. 创建ionic应用</h4><p>ionic start myApp tabs</p><h4 id="3-启动应用"><a href="#3-启动应用" class="headerlink" title="3. 启动应用"></a>3. 启动应用</h4><p>cd myApp<br>ionic serve</p><a id="more"></a><h4 id="4-添加ionic的ios运行平台"><a href="#4-添加ionic的ios运行平台" class="headerlink" title="4. 添加ionic的ios运行平台"></a>4. 添加ionic的ios运行平台</h4><p>city_operation_app$ionic platform add ios<br>The platform command has been renamed. To find out more, run:</p><p>  ionic cordova platform –help</p><p>city_operation_app$ionic cordova platform –help<br>解决办法：实用命令ionic cordova platfrom add ios</p><p>如果是添加android平台<br>运行</p><blockquote><p>ionic cordova platform add</p></blockquote><p>这时会有提示，选择ios或者android</p><p>或者直接运行</p><blockquote><p>ionic cordova platform add andriod</p></blockquote><p>跑完上面的命令，会在项目下面自动新增一个platform目录，下面有对于端ios目录和android目录。</p><h4 id="5-构建项目"><a href="#5-构建项目" class="headerlink" title="5. 构建项目"></a>5. 构建项目</h4><p>ionic cordova build ios</p><h4 id="6-运行项目"><a href="#6-运行项目" class="headerlink" title="6. 运行项目"></a>6. 运行项目</h4><p>cordova emulate ios –target=”iPhone-6”</p><p>安装highcharts<br>city_operation_app$typings install dt~highcharts –save –global<br>highcharts</p><h4 id="7-集成highcharts"><a href="#7-集成highcharts" class="headerlink" title="7. 集成highcharts"></a>7. 集成highcharts</h4><p> 7.1 安装highcharts</p><blockquote><p>npm install highcharts –save</p></blockquote><p> 7.2 安装ng-highcharts</p><blockquote><p>npm install ng-higcharts –save</p></blockquote><p> 7.3 在ts文件中引入</p><blockquote><p>import * as Highcharts from ‘highcharts’;</p></blockquote><p> 7.4使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@ViewChild(<span class="string">'chart'</span>) public chart: ElementRef;</span><br><span class="line">ionViewDidEnter() &#123;</span><br><span class="line">    Highcharts.chart(<span class="string">'tourism1'</span>, &#123;</span><br><span class="line">      chart: &#123;</span><br><span class="line">        type: <span class="string">'bar'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      title: &#123;</span><br><span class="line">        text: <span class="string">'Fruit Consumption'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      xAxis: &#123;</span><br><span class="line">        categories: [<span class="string">'Apples'</span>, <span class="string">'Bananas'</span>, <span class="string">'Oranges'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      yAxis: &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          text: <span class="string">'Fruit eaten'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      series: [&#123;</span><br><span class="line">        name: <span class="string">'Jane'</span>,</span><br><span class="line">        data: [<span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>]</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        name: <span class="string">'John'</span>,</span><br><span class="line">        data: [<span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>]</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8-集成chart"><a href="#8-集成chart" class="headerlink" title="8 集成chart"></a>8 集成chart</h4><p>8.1 安装组件</p><blockquote><p>npm install –save  chart.js</p></blockquote><p>8.2 在ts文件中引入</p><blockquote><p>import * as ChartJs from ‘chart.js’;</p></blockquote><ol start="3"><li>在ts文件中实用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">getlivelihoodRate() &#123;</span><br><span class="line">    var canvas = &lt;HTMLCanvasElement&gt; document.getElementById(&quot;myChart&quot;);</span><br><span class="line">    var ctx = canvas.getContext(&quot;2d&quot;);  // 这里是关键, 不能写在constructor()中</span><br><span class="line">    new ChartJs(ctx, &#123;</span><br><span class="line">      type: &apos;bar&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        labels: [&quot;Red&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Purple&quot;, &quot;Orange&quot;],</span><br><span class="line">        datasets: [&#123;</span><br><span class="line">          label: &apos;# of Votes&apos;,</span><br><span class="line">          data: [12, 19, 3, 5, 2, 3],</span><br><span class="line">          backgroundColor: [</span><br><span class="line">            &apos;rgba(255, 99, 132, 0.2)&apos;,</span><br><span class="line">            &apos;rgba(54, 162, 235, 0.2)&apos;,</span><br><span class="line">            &apos;rgba(255, 206, 86, 0.2)&apos;,</span><br><span class="line">            &apos;rgba(75, 192, 192, 0.2)&apos;,</span><br><span class="line">            &apos;rgba(153, 102, 255, 0.2)&apos;,</span><br><span class="line">            &apos;rgba(255, 159, 64, 0.2)&apos;</span><br><span class="line">          ],</span><br><span class="line">          borderColor: [</span><br><span class="line">            &apos;rgba(255,99,132,1)&apos;,</span><br><span class="line">            &apos;rgba(54, 162, 235, 1)&apos;,</span><br><span class="line">            &apos;rgba(255, 206, 86, 1)&apos;,</span><br><span class="line">            &apos;rgba(75, 192, 192, 1)&apos;,</span><br><span class="line">            &apos;rgba(153, 102, 255, 1)&apos;,</span><br><span class="line">            &apos;rgba(255, 159, 64, 1)&apos;</span><br><span class="line">          ],</span><br><span class="line">          borderWidth: 1</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      options: &#123;</span><br><span class="line">        scales: &#123;</span><br><span class="line">          yAxes: [&#123;</span><br><span class="line">            ticks: &#123;</span><br><span class="line">              beginAtZero: true</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>8.4 html文件中编写图表元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&quot;myChart&quot; width=&quot;60%&quot; height=&quot;60%&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure></p><h4 id="9-添加导航，并返回"><a href="#9-添加导航，并返回" class="headerlink" title="9 添加导航，并返回"></a>9 添加导航，并返回</h4><p>点击按钮，打开一个新页面，新页面带有“返回”按钮。最直接的方式是参考官方文档。<br>9.1 写好跳转后的页面，入详情页面<br>9.2 引入detail页面</p><blockquote><p>import { PopulationDetailPage } from ‘./sub/population_detail’;<br>9.3 在home.ts中写点击事件处理方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openNavDetailsPage(item) &#123;</span><br><span class="line">    this.nav.push(PopulationDetailPage, &#123; item:item &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>9.4 在appModule中声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; PopulationDetailPage&#125; from &apos;../pages/home/sub/population_detail&apos;;</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    MyApp,</span><br><span class="line">    ...</span><br><span class="line">    PopulationDetailPage</span><br><span class="line">  ],</span><br><span class="line">    entryComponents: [</span><br><span class="line">    MyApp,</span><br><span class="line">    ...</span><br><span class="line">    PopulationDetailPage</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>9.5 修改返回按钮的文字：从BACK变为中文的“返回”</p><p>也是在appModule中修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">   BrowserModule,</span><br><span class="line">   HttpModule,</span><br><span class="line">   JsonpModule,</span><br><span class="line">   IonicModule.forRoot(MyApp, &#123;</span><br><span class="line">     backButtonText: &apos;返回&apos;,</span><br><span class="line">   &#125;)</span><br><span class="line"> ],</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-环境准备&quot;&gt;&lt;a href=&quot;#1-环境准备&quot; class=&quot;headerlink&quot; title=&quot;1. 环境准备&quot;&gt;&lt;/a&gt;1. 环境准备&lt;/h4&gt;&lt;p&gt;npm install -g cordova ionic&lt;br&gt;配置android sdk和java环境变量&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~$cat ./.bash_profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JAVA_HOME=&lt;span class=&quot;regexp&quot;&gt;/Library/&lt;/span&gt;Java/JavaVirtualMachines/jdk1&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;_80.jdk/Contents/Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANDROID_HOME=&lt;span class=&quot;regexp&quot;&gt;/Users/&lt;/span&gt;wukangjie/Library/Android/sdk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M2_HOME=&lt;span class=&quot;regexp&quot;&gt;/Users/&lt;/span&gt;wukangjie/Documents/apache-maven&lt;span class=&quot;number&quot;&gt;-3.5&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PATH=$JAVA_HOME/bin:$PATH:.:$M2_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; JAVA_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; ANDROID_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; CLASSPAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; M2_HOME&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-创建ionic应用&quot;&gt;&lt;a href=&quot;#2-创建ionic应用&quot; class=&quot;headerlink&quot; title=&quot;2. 创建ionic应用&quot;&gt;&lt;/a&gt;2. 创建ionic应用&lt;/h4&gt;&lt;p&gt;ionic start myApp tabs&lt;/p&gt;
&lt;h4 id=&quot;3-启动应用&quot;&gt;&lt;a href=&quot;#3-启动应用&quot; class=&quot;headerlink&quot; title=&quot;3. 启动应用&quot;&gt;&lt;/a&gt;3. 启动应用&lt;/h4&gt;&lt;p&gt;cd myApp&lt;br&gt;ionic serve&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用vps搭建翻墙服务，实现科学上网</title>
    <link href="http://bambooj.github.io/2017/05/29/vps/"/>
    <id>http://bambooj.github.io/2017/05/29/vps/</id>
    <published>2017-05-28T17:45:32.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>用过当前市面上比较流行的翻墙工具，比如lantern、loco加速器。但都比较贵，一个月好几十块钱，有时还不是很稳定，于是就想自己租用一个外地服务器，实现科学上网，这里使用的是vultr服务器搭建翻墙</p><a id="more"></a><h4 id="一、在https-www-vultr-com-购买服务器"><a href="#一、在https-www-vultr-com-购买服务器" class="headerlink" title="一、在https://www.vultr.com/购买服务器"></a>一、在<a href="https://www.vultr.com/购买服务器" target="_blank" rel="noopener">https://www.vultr.com/购买服务器</a></h4><ul><li>注册账号</li></ul><p>注册一个vultr账号，登录vultr</p><ul><li>购买服务器</li></ul><p>使用paypal支付<br><img src="/img/2017/5/vps.jpg" alt="img/2017/5/vps.jpg"></p><ul><li>paypal账号</li></ul><p>如果还没有paypal账号支付，就去注册一个，并关联信用卡。不然无法支付。</p><ul><li>查看服务器信息，并使用xshell连接</li></ul><p><img src="/img/2017/5/vps02.jpg" alt="/img/2017/5/vps02.jpg"></p><p><img src="/img/2017/5/vps03.jpg" alt="/img/2017/5/vps03.jpg"></p><h4 id="二、-安装ssr"><a href="#二、-安装ssr" class="headerlink" title="二、 安装ssr"></a>二、 安装ssr</h4><p>ssr，也就是翻墙使用的服务器端的软件。比较常用的是shadowsocks。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https:<span class="comment">//www.qcgzxw.cn/SSR/shadowsocksR.sh; bash shadowsocksR.sh</span></span><br></pre></td></tr></table></figure></p><p>安装成功<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">祝贺！ ShadowsocksR 已经配置成功!</span><br><span class="line">服务器 IP:  <span class="number">45.32</span>.XXX.XXX </span><br><span class="line">服务器 端口:  <span class="number">8989</span> </span><br><span class="line">连接密码:  yourpwd123</span><br><span class="line">协议:  auth_sha1_v4 </span><br><span class="line">obfs:  tls1<span class="number">.2</span>_ticket_auth </span><br><span class="line">加密方式:  chacha20 </span><br><span class="line">多用户配置方式:https:<span class="comment">//www.qcgzxw.cn/?p=533</span></span><br><span class="line">如果您想更改连接协议或者加密方式 请前往：</span><br><span class="line">https:<span class="comment">//www.qcgzxw.cn/?p=533</span></span><br><span class="line"></span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure></p><p>注意，安装完成后，默认的加密方式是chacha20.后面连接不了，就是因为这个加密方式的问题，后面需要改成aes-256-cfb.再重新连接就可以了。</p><h4 id="三、安装锐速"><a href="#三、安装锐速" class="headerlink" title="三、安装锐速"></a>三、安装锐速</h4><p>安装脚本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https:<span class="comment">//github.com/91yun/serverspeeder/raw/master/serverspeeder-v.sh &amp;&amp; bash serverspeeder-v.sh CentOS 7.2 3.10.0-327.el7.x86_64 x64 3.11.20.5 serverspeeder_72327</span></span><br></pre></td></tr></table></figure></p><p>如果安装失败，<a href="https://www.91yun.org/serverspeeder91yun" target="_blank" rel="noopener">https://www.91yun.org/serverspeeder91yun</a> 找到合适的版本。不同的系统安装的时候是不同的脚本的。</p><p>安装成功提示<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">===============System Info=======================</span><br><span class="line">CentOS </span><br><span class="line"><span class="number">3.10</span><span class="number">.0</span><span class="number">-514.16</span><span class="number">.1</span>.el7.x86_64 </span><br><span class="line">x64 </span><br><span class="line">=================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">installing ServerSpeeder, please wait <span class="keyword">for</span> a moment...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Running Status]</span><br><span class="line">ServerSpeeder is NOT running!</span><br><span class="line">version              <span class="number">3.11</span><span class="number">.20</span><span class="number">.5</span></span><br><span class="line"></span><br><span class="line">[License Information]</span><br><span class="line">License              <span class="number">607</span>CDDB633476C89 (valid on current device)</span><br><span class="line">MaxSession           unlimited</span><br><span class="line">MaxTcpAccSession     unlimited</span><br><span class="line">MaxBandwidth(kbps)   unlimited</span><br><span class="line">ExpireDate           <span class="number">2034</span><span class="number">-12</span><span class="number">-31</span></span><br><span class="line">[root@vultr ~]#</span><br></pre></td></tr></table></figure></p><h4 id="四、安装shadowsocks连接客户端"><a href="#四、安装shadowsocks连接客户端" class="headerlink" title="四、安装shadowsocks连接客户端"></a>四、安装shadowsocks连接客户端</h4><p>已经启动了shadowsocks，但是访问 google.com出现错误<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">504</span> Connect to google.com:<span class="number">80</span> failed: SOCKS protocol error</span><br><span class="line"></span><br><span class="line">The following error occurred <span class="keyword">while</span> trying to access http:<span class="comment">//google.com/:</span></span><br><span class="line"></span><br><span class="line"><span class="number">504</span> Connect to google.com:<span class="number">80</span> failed: SOCKS protocol error</span><br><span class="line"></span><br><span class="line">Generated Sun, <span class="number">28</span> May <span class="number">2017</span> <span class="number">12</span>:<span class="number">19</span>:<span class="number">48</span> 中国标准时间 by Polipo on Lenovo-PC:<span class="number">8123.</span></span><br></pre></td></tr></table></figure></p><p>解决办法：<br>就是那个连接方式的问题，加密方式由默认的chacha20改成aes-256-cfb。重启shadowsocks，重新连接就可以了。</p><hr><h4 id="五、-重启shadowsocks服务"><a href="#五、-重启shadowsocks服务" class="headerlink" title="五、 重启shadowsocks服务"></a>五、 重启shadowsocks服务</h4><p>重启之前，先使用<strong>ps -ef|grep shadowsocks</strong>查看已经启用的进程，再<strong>kill -9 pid</strong>杀掉进程，重启即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /usr/local/shadowsocks/shadowsocks/server.py -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><h4 id="六、参考地址"><a href="#六、参考地址" class="headerlink" title="六、参考地址"></a>六、参考地址</h4><ol><li>注册vulter，租用服务器，类似于国内的阿里云：<br><a href="https://my.vultr.com/" target="_blank" rel="noopener">https://my.vultr.com/</a></li><li>注册paypal账号并绑定信用卡：<a href="https://www.paypal.com/signin" target="_blank" rel="noopener">https://www.paypal.com/signin</a></li><li>安装shadowsocks教程：<a href="https://www.qcgzxw.cn" target="_blank" rel="noopener">https://www.qcgzxw.cn</a></li><li>shadowsocks文档和下载：<a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows</a></li><li>shadowsocks客户端：<a href="https://github.com/shadowsocks/shadowsocks-qt5" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-qt5</a> 。也可以不用这个</li><li>锐速安装地址：<a href="https://www.91yun.org/serverspeeder91yun" target="_blank" rel="noopener">https://www.91yun.org/serverspeeder91yun</a></li></ol><h4 id="七、特别提醒"><a href="#七、特别提醒" class="headerlink" title="七、特别提醒"></a>七、特别提醒</h4><p>安装完ssr后，记得修改加密方式为aes-256-cfb。并重启服务。这个很重要。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用过当前市面上比较流行的翻墙工具，比如lantern、loco加速器。但都比较贵，一个月好几十块钱，有时还不是很稳定，于是就想自己租用一个外地服务器，实现科学上网，这里使用的是vultr服务器搭建翻墙&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻墙" scheme="http://bambooj.github.io/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>tomcat内存溢出PerGen space</title>
    <link href="http://bambooj.github.io/2017/05/18/oom01/"/>
    <id>http://bambooj.github.io/2017/05/18/oom01/</id>
    <published>2017-05-18T15:44:11.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、应用在tomcat运行一段时间后，出现内存溢出报错。如永久区内存溢出PermGen-space"><a href="#一、应用在tomcat运行一段时间后，出现内存溢出报错。如永久区内存溢出PermGen-space" class="headerlink" title="一、应用在tomcat运行一段时间后，出现内存溢出报错。如永久区内存溢出PermGen space;"></a>一、应用在tomcat运行一段时间后，出现内存溢出报错。如永久区内存溢出PermGen space;</h4><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-5</span><span class="number">-18</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">01</span> org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler process</span><br><span class="line">严重: <span class="built_in">Error</span> reading request, ignored</span><br><span class="line">java.lang.OutOfMemoryError: PermGen space</span><br><span class="line">at java.lang.Throwable.getStackTraceElement(Native Method)</span><br><span class="line">at java.lang.Throwable.getOurStackTrace(Throwable.java:<span class="number">591</span>)</span><br><span class="line">at java.lang.Throwable.printStackTrace(Throwable.java:<span class="number">510</span>)</span><br><span class="line">at java.util.logging.SimpleFormatter.format(SimpleFormatter.java:<span class="number">72</span>)</span><br><span class="line">at org.apache.juli.FileHandler.publish(FileHandler.java:<span class="number">198</span>)</span><br><span class="line">at java.util.logging.Logger.log(Logger.java:<span class="number">478</span>)</span><br><span class="line">at java.util.logging.Logger.doLog(Logger.java:<span class="number">500</span>)</span><br><span class="line">at java.util.logging.Logger.logp(Logger.java:<span class="number">700</span>)</span><br><span class="line">at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:<span class="number">167</span>)</span><br><span class="line">at org.apache.juli.logging.DirectJDKLog.error(DirectJDKLog.java:<span class="number">135</span>)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:<span class="number">875</span>)</span><br><span class="line">at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:<span class="number">620</span>)</span><br><span class="line">at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:<span class="number">489</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">662</span>)</span><br></pre></td></tr></table></figure><h4 id="二、原因分析："><a href="#二、原因分析：" class="headerlink" title="二、原因分析："></a>二、原因分析：</h4><ol><li>查看应用运行分配的内存情况<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[testapp@zhmgr<span class="number">-002</span> microactivitymgr]$ jps -lv|grep activity</span><br><span class="line"><span class="number">13046</span> org.apache.catalina.startup.Bootstrap -Xms512m -Xmx1024m -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -Djava.util.logging.config.file=<span class="regexp">/data/</span>tomcat6-microactivitymgr/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.endorsed.dirs=<span class="regexp">/data/</span>tomcat6-microactivitymgr/endorsed -Dcatalina.base=<span class="regexp">/data/</span>tomcat6-microactivitymgr -Dcatalina.home=<span class="regexp">/data/</span>tomcat6-microactivitymgr -Djava.io.tmpdir=<span class="regexp">/data/</span>tomcat6-microactivitymgr/temp</span><br></pre></td></tr></table></figure></li></ol><p>发现只对堆内存设置了内存-Xms512m -Xmx1024m，永久区并没有设置（XX参数）。</p><ol start="2"><li>查看该应用的内存使用情况<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt;jstat -gcutil <span class="number">13046</span></span><br><span class="line">  S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">  <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">5.83</span> <span class="number">100.00</span>     <span class="number">54</span>    <span class="number">0.264</span>  <span class="number">2174</span>  <span class="number">515.817</span>  <span class="number">516.081</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="三、-解决办法：加大永久区的内存"><a href="#三、-解决办法：加大永久区的内存" class="headerlink" title="三、 解决办法：加大永久区的内存"></a>三、 解决办法：加大永久区的内存</h4><p>配置方法：<br>在之前的加大堆方法的后面加上：</p><blockquote><p>-XX:MaxNewSize=256m -XX:MaxPermSize=256m</p></blockquote><p>重启即可</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、应用在tomcat运行一段时间后，出现内存溢出报错。如永久区内存溢出PermGen-space&quot;&gt;&lt;a href=&quot;#一、应用在tomcat运行一段时间后，出现内存溢出报错。如永久区内存溢出PermGen-space&quot; class=&quot;headerlink&quot; title=&quot;一、应用在tomcat运行一段时间后，出现内存溢出报错。如永久区内存溢出PermGen space;&quot;&gt;&lt;/a&gt;一、应用在tomcat运行一段时间后，出现内存溢出报错。如永久区内存溢出PermGen space;&lt;/h4&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="http://bambooj.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>redis安装</title>
    <link href="http://bambooj.github.io/2017/05/18/install-redis/"/>
    <id>http://bambooj.github.io/2017/05/18/install-redis/</id>
    <published>2017-05-18T04:35:21.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>按照官网的安装流程就行安装<br><a id="more"></a></p><h4 id="一、执行make命令-报错"><a href="#一、执行make命令-报错" class="headerlink" title="一、执行make命令,报错"></a>一、执行make命令,报错</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nq-sz-kf001-01 src]# make</span><br><span class="line">    CC adlist.o</span><br><span class="line">In file included <span class="keyword">from</span> adlist.c:<span class="number">34</span>:</span><br><span class="line">zmalloc.h:<span class="number">50</span>:<span class="number">31</span>: error: jemalloc/jemalloc.h: No such file or directory</span><br><span class="line">zmalloc.h:55:2: error: #error "Newer version of jemalloc required"</span><br><span class="line">make: *** [adlist.o] <span class="built_in">Error</span> <span class="number">1</span></span><br><span class="line">[root@nq-sz-kf001-01 src]#</span><br></pre></td></tr></table></figure><h4 id="二、-报错处理：没有gcc"><a href="#二、-报错处理：没有gcc" class="headerlink" title="二、 报错处理：没有gcc"></a>二、 报错处理：没有gcc</h4><p>安装过程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install cpp</span><br><span class="line">yum install binutils</span><br><span class="line">yum install glibc</span><br><span class="line">yum install glibc-kernheaders</span><br><span class="line">yum install glibc-common</span><br><span class="line">yum install glibc-devel</span><br><span class="line">yum install gcc</span><br><span class="line">yum install make</span><br></pre></td></tr></table></figure></p><blockquote><p>注意gcc依赖了很多东西，有些包可能系统已经 装了，有些没有，防止出意外，最好都走一遍</p></blockquote><p>############解决方法#############<br>make MALLOC=libc</p><h4 id="三、window下安装"><a href="#三、window下安装" class="headerlink" title="三、window下安装"></a>三、window下安装</h4><p>1、下载地址<a href="https://github.com/dmajkic/redis/downloads" target="_blank" rel="noopener">https://github.com/dmajkic/redis/downloads</a><br>2、打开一个cmd窗口，使用cd命令切换到指定目录（D:\redis\64bit）运行 redis-server.exe redis.conf 。运行以后出现如下界面</p><h4 id="四、测试Redis服务端是否已经安装成功"><a href="#四、测试Redis服务端是否已经安装成功" class="headerlink" title="四、测试Redis服务端是否已经安装成功"></a>四、测试Redis服务端是否已经安装成功</h4><ol><li>cmd到<strong>D:\redis\64bit</strong>,运行 <blockquote><p>redis-cli.exe -h 127.0.0.1 -p 6379</p></blockquote></li></ol><p>其中 127.0.0.1是本地ip，6379是redis服务端的默认端口</p><ol start="2"><li>测试<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set test <span class="string">"11111111111111111"</span></span><br><span class="line">get test</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照官网的安装流程就行安装&lt;br&gt;
    
    </summary>
    
      <category term="数据存储" scheme="http://bambooj.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="redis" scheme="http://bambooj.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>linux环境：内存溢出</title>
    <link href="http://bambooj.github.io/2017/05/18/linux-shell-02/"/>
    <id>http://bambooj.github.io/2017/05/18/linux-shell-02/</id>
    <published>2017-05-18T04:20:17.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>有时候在linux环境下tomcat内存不够，需要手动增加内存的配置</p><blockquote><p>vim ./catalina.sh</p></blockquote><p>大概在375行<br><img src="/img/2017/5/tomcat01.jpg" alt=""><br>只需要新增添加的部分<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms1024m -Xmx1024m -XX:+UseConcMarkSweepGC -XX:+UseParNewGC</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候在linux环境下tomcat内存不够，需要手动增加内存的配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vim ./catalina.sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概在375行&lt;br&gt;&lt;img src=&quot;/img/2017/5/tomcat01.j
      
    
    </summary>
    
      <category term="linux" scheme="http://bambooj.github.io/categories/linux/"/>
    
    
      <category term="linux tomcat" scheme="http://bambooj.github.io/tags/linux-tomcat/"/>
    
  </entry>
  
  <entry>
    <title>linux环境：tomcat统一启动脚本</title>
    <link href="http://bambooj.github.io/2017/05/18/linux-shell-01/"/>
    <id>http://bambooj.github.io/2017/05/18/linux-shell-01/</id>
    <published>2017-05-18T04:17:15.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>如果linux服务器安装了很多tomcat应用，有时候需要单独重启某一个tomcat的应用，这时候，如果每次操作都需要进入到tomcat的bin目录下面去执行shutdown.sh和startup.sh，这将是非常麻烦的事情。所以就写了一个脚本，以便在shell中任何位置都可以重启指定的tomcat。<br><a id="more"></a></p><h4 id="一、在-usr-scripts-下面脚本文件restartpro-sh内容"><a href="#一、在-usr-scripts-下面脚本文件restartpro-sh内容" class="headerlink" title="一、在/usr/scripts/下面脚本文件restartpro.sh内容"></a>一、在/usr/scripts/下面脚本文件restartpro.sh内容</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="string">"$1"</span> ]; then</span><br><span class="line">        echo <span class="string">"脚本执行方法： restartpro 程序名"</span></span><br><span class="line">        exit</span><br><span class="line">fi</span><br><span class="line">source /etc/profile</span><br><span class="line">ps -ef|grep tomcat6-$<span class="number">1</span>|grep -v tomcat6-$<span class="number">1</span>-|awk <span class="string">'&#123;print $2&#125;'</span>|xargs kill <span class="number">-9</span></span><br><span class="line">cd /data/tomcat6-$<span class="number">1</span>/conf/Catalina</span><br><span class="line">rm -rf localhost</span><br><span class="line">cd /data/tomcat6-$<span class="number">1</span>/work/Catalina</span><br><span class="line">rm -rf localhost logs</span><br><span class="line">cd /data/tomcat6-$<span class="number">1</span>/logs</span><br><span class="line">rm -rf *.log* *.out</span><br><span class="line">/data/tomcat6-$<span class="number">1</span>/bin/startup.sh</span><br><span class="line">tail -f /data/tomcat6-$<span class="number">1</span>/logs<span class="comment">/*.out</span></span><br></pre></td></tr></table></figure><h4 id="二、在-etc-profile文件最后一行添加"><a href="#二、在-etc-profile文件最后一行添加" class="headerlink" title="二、在/etc/profile文件最后一行添加"></a>二、在/etc/profile文件最后一行添加</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias restartpro=<span class="string">'/usr/scripts/restartpro.sh'</span></span><br><span class="line">#alias restartpro7='/usr/scripts/restartpro7.sh'</span><br></pre></td></tr></table></figure><h4 id="三、重启tomcat"><a href="#三、重启tomcat" class="headerlink" title="三、重启tomcat"></a>三、重启tomcat</h4><p>假设我们有三个tomcat，分别放在/data/下面，名字为</p><ol><li>tomcat-A</li><li>tomcat-B</li><li>tomcat-C<br>那么我现在需要重启tomcat-B，直接就可以在shell中执行<blockquote><p>$&gt;restartpro B</p></blockquote></li></ol><p>注：不需要tomcat，可以通过脚本可以看得出。脚本会自动给咱们加上<strong>tomcat-</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果linux服务器安装了很多tomcat应用，有时候需要单独重启某一个tomcat的应用，这时候，如果每次操作都需要进入到tomcat的bin目录下面去执行shutdown.sh和startup.sh，这将是非常麻烦的事情。所以就写了一个脚本，以便在shell中任何位置都可以重启指定的tomcat。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://bambooj.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://bambooj.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用DataGrip通过ssl方式连接MySQL数据库</title>
    <link href="http://bambooj.github.io/2017/05/18/ssl-mysql/"/>
    <id>http://bambooj.github.io/2017/05/18/ssl-mysql/</id>
    <published>2017-05-18T02:54:00.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>以前一直使用navicat连接mysql，虽然也特别好用，功能强大，但是这个工具经常卡死无法响应。后面在使用Intellij IDEA的过程中，在它官网就发现了DataGrip，发现这个工具比较好用，自动提示也非常好。下面就简单介绍一下这个工具如何通过ssl方式连接MySQL，当然navicat也是可以使用ssl连接的。<br><a id="more"></a></p><h4 id="一、-ssl连接准备"><a href="#一、-ssl连接准备" class="headerlink" title="一、 ssl连接准备"></a>一、 ssl连接准备</h4><p>平时我们直接连接使用工具连接mysql的时候，直接输入IP、端口、用户名和密码登录。但是使用ssl登录的时候，需要额外得做个简单配置，准备文件有：</p><ol><li>client-cert.pem</li><li>client-no-password-key.pem</li><li>mysql-ca-cert.pem</li></ol><h4 id="二、-连接mysql"><a href="#二、-连接mysql" class="headerlink" title="二、 连接mysql"></a>二、 连接mysql</h4><ol><li>正常连接，输入IP、端口、用户名和密码<br><img src="/img/2017/5/mysql01.jpg" alt=""></li><li>使用ssl连接<br><img src="/img/2017/5/mysql02.jpg" alt=""></li></ol><h4 id="三、总结，"><a href="#三、总结，" class="headerlink" title="三、总结，"></a>三、总结，</h4><ol><li>需要准备ssl连接文件</li><li>ssl连接文件路径不能有中文字符</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前一直使用navicat连接mysql，虽然也特别好用，功能强大，但是这个工具经常卡死无法响应。后面在使用Intellij IDEA的过程中，在它官网就发现了DataGrip，发现这个工具比较好用，自动提示也非常好。下面就简单介绍一下这个工具如何通过ssl方式连接MySQL，当然navicat也是可以使用ssl连接的。&lt;br&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://bambooj.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用powerdesigner反向工程生成数据表的测试数据</title>
    <link href="http://bambooj.github.io/2017/05/13/generate-test-data-by-powerdesigner/"/>
    <id>http://bambooj.github.io/2017/05/13/generate-test-data-by-powerdesigner/</id>
    <published>2017-05-13T11:33:34.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在搞一个项目，对接接口的时候发现没有测试数据。通过系统新增测试数据固然是比较正规并且有意义的。但是系统部分功能还未实现或者某一个步骤还没开发好，<br>于是，想在表里面手动制造大量的数据是不可能的，只能够使用工具来。于是，在网上搜了一些资料，发现不是使用程序来生成就是一些不怎么好用的工具。于是就想到了平时用得最多的，用来做表结构设计的powerdesigner。<br>下面就powerdesigner反向工程，制造测试数据的过程以及过程中遇到的一些问题说明一下，以便后续需要时查阅。<br><a id="more"></a><br>环境：windows10(7,8) powerdesigner15.1</p><h4 id="一、-配置odbc数据源"><a href="#一、-配置odbc数据源" class="headerlink" title="一、 配置odbc数据源"></a>一、 配置odbc数据源</h4><pre><code>配置odbc也非常简单，一张图就够了。</code></pre><p><img src="/img/2017/5/01.png" alt="01333"></p><ol><li>mysql的odbc连接数据源；如果没有MySQL的连接选项，是因为还没有安装mysql的odbc连接驱动。此时可以去官网下载连接驱动，安装完，重新打开就有了。<br><a href="https://dev.mysql.com/downloads/connector/odbc/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/connector/odbc/</a></li><li>如果要操作的是oracle，没有oracle选项，那么可以从oracle官网下载客户端安装就好了。<br>下载地址：<a href="http://www.oracle.com/technetwork/topics/winx64soft-089540.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/topics/winx64soft-089540.html</a><br>根据需要下载对于的版本。这里oracle的安装有一些需要注意的地方，可以参考：<a href="http://www.cnblogs.com/shelvenn/p/3799849.html" target="_blank" rel="noopener">http://www.cnblogs.com/shelvenn/p/3799849.html</a><br><img src="/img/2017/5/03.png" alt=""><br>安装完成，再点击添加就有了orcale odbc的选项了<br><img src="/img/2017/5/04.png" alt=""><br>进行连接数据并测试，连接成功就可以了<br><img src="/img/2017/5/05.png" alt=""><br>至此，odbc的配置以及完成。接下来就是powerdegsigner的反向工程了<h4 id="二、powerdesigner的反向工程"><a href="#二、powerdesigner的反向工程" class="headerlink" title="二、powerdesigner的反向工程"></a>二、powerdesigner的反向工程</h4>选择： 文件/File&gt; Reverse Engineer&gt; Database,选择对于的数据库类型和版本<br><img src="/img/2017/5/0201.png" alt=""><br>连接数据库<br><img src="/img/2017/5/06.png" alt=""><blockquote><p>此时test Connection出现错误，而在添加odbc的时候正确，是因为powerdesigner使用的是32位的执行jvm，而本地是使用64位的。所以连接不成功。此时，可以修改powerdesigner的jdk配置。<br>工具–&gt;常规选项，配置如下图</p></blockquote></li></ol><p><img src="/img/2017/5/0203.png" alt=""><br>注：确保配置的jdk版本是32位。<br>如果发现没有工具菜单下面没有常规选项，是因为powerdesigner还没有破解，可以先破解，方法可以去百度一下，这里就不在累赘<br><img src="/img/2017/5/0204.png" alt=""><br>如果还是不行，换用32位的odbc，我的是试了所有上述方法之后不行，后来试了这个方法才可以的。是自己刚在安装了64位的odbc数据源了。<br><img src="/img/2017/5/0205.png" alt=""></p><p>至此，反向工程第一步，也就是已经存在数据库表，反向生成PDM模型的过程已经完成。</p><p>接下来就是生成模拟数据了。</p><h4 id="三、测试数据的生成"><a href="#三、测试数据的生成" class="headerlink" title="三、测试数据的生成"></a>三、测试数据的生成</h4><p>生成数据: 数据库&gt;Generate test data<br><img src="/img/2017/5/0206.png" alt=""><br>测试数据的生成也很简单，这里只是列出了针对在定义字段的测试profiles时出现的一些问题的解决方案<br>在定义日期时间的范围的时候，发现年份的定义只有三位数，这个是不合理的，也算是powerdesigner的一个bug吧，但是也不是没有解决方案，看一下这下面这两个图，基本就是可以了。<br><img src="/img/2017/5/0301.png" alt=""><br>解决方案<br><img src="/img/2017/5/0302.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天在搞一个项目，对接接口的时候发现没有测试数据。通过系统新增测试数据固然是比较正规并且有意义的。但是系统部分功能还未实现或者某一个步骤还没开发好，&lt;br&gt;于是，想在表里面手动制造大量的数据是不可能的，只能够使用工具来。于是，在网上搜了一些资料，发现不是使用程序来生成就是一些不怎么好用的工具。于是就想到了平时用得最多的，用来做表结构设计的powerdesigner。&lt;br&gt;下面就powerdesigner反向工程，制造测试数据的过程以及过程中遇到的一些问题说明一下，以便后续需要时查阅。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://bambooj.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="powerdesigner" scheme="http://bambooj.github.io/tags/powerdesigner/"/>
    
  </entry>
  
  <entry>
    <title>mysql启动和中文字符乱码</title>
    <link href="http://bambooj.github.io/2017/05/05/mysql-charset-error-20170505/"/>
    <id>http://bambooj.github.io/2017/05/05/mysql-charset-error-20170505/</id>
    <published>2017-05-05T02:20:11.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>mysql是使用非常广泛的关系型数据库，在使用过程中经常会遇到一些问题。<br>本篇记录在mysql启动的过程中遇到的问题，以及mysql数据库中文乱码问题的处理。<br><a id="more"></a></p><h4 id="一、启动报错"><a href="#一、启动报错" class="headerlink" title="一、启动报错"></a>一、启动报错</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz96tljwj636zfkf3wvqz share]# mysql</span><br><span class="line">ERROR <span class="number">2002</span> (HY000): Can<span class="string">'t connect to local MySQL server through socket '</span>/<span class="keyword">var</span>/lib/mysql/mysql.sock<span class="string">' (2)</span></span><br><span class="line"><span class="string">[root@izwz96tljwj636zfkf3wvqz share]# mysqld</span></span><br><span class="line"><span class="string">2017-05-04T12:11:42.751767Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).</span></span><br><span class="line"><span class="string">2017-05-04T12:11:42.753370Z 0 [Note] mysqld (mysqld 5.7.18) starting as process 2797 ...</span></span><br><span class="line"><span class="string">2017-05-04T12:11:42.755044Z 0 [ERROR] Fatal error: Please read "Security" section of the manual to find out how to run mysqld as root!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2017-05-04T12:11:42.755075Z 0 [ERROR] Aborting</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2017-05-04T12:11:42.755088Z 0 [Note] Binlog end</span></span><br><span class="line"><span class="string">2017-05-04T12:11:42.755220Z 0 [Note] mysqld: Shutdown complete</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@izwz96tljwj636zfkf3wvqz share]#</span></span><br></pre></td></tr></table></figure><ol><li><p>为了不让警告mysqld –default-file=/etc/my.cnf –user=root出现，<br>启动mysql时，设置–explicit_defaults_for_timestamp=true<br>即在/etc/my.cnf在[mysqld]下面添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explicit_defaults_for_timestamp=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>解决Security的问题<br>在/etc/my.cnf的[mysqld]下面添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=root</span><br></pre></td></tr></table></figure></li></ol><p>使得启动mysql服务时，强行使用root用户启动</p><hr><h4 id="二、又一次启动报错了"><a href="#二、又一次启动报错了" class="headerlink" title="二、又一次启动报错了"></a>二、又一次启动报错了</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz96tljwj636zfkf3wvqz ~]# service mysqld start</span><br><span class="line">Starting mysqld (via systemctl):  Job <span class="keyword">for</span> mysqld.service failed because the control process exited <span class="keyword">with</span> error code. See <span class="string">"systemctl status mysqld.service"</span> and <span class="string">"journalctl -xe"</span> <span class="keyword">for</span> details.</span><br><span class="line">                                                           [FAILED]</span><br></pre></td></tr></table></figure><p>处理过程如下</p><ol><li>执行&gt;journalctl -ex  #查看错误代码</li><li>查看mysql日志文件&gt;vim /var/log/mysql.log</li><li>进入日志文件，查看后面的错误代码</li><li>发现有错误<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-05</span><span class="number">-04</span>T17:<span class="number">56</span>:<span class="number">59.784551</span>Z <span class="number">0</span> [ERROR] unknown variable <span class="string">'default-character-set=utf8'</span></span><br><span class="line"><span class="number">2017</span><span class="number">-05</span><span class="number">-04</span>T17:<span class="number">56</span>:<span class="number">59.784564</span>Z <span class="number">0</span> [ERROR] Aborting</span><br></pre></td></tr></table></figure></li></ol><p>解决办法  </p><blockquote><p><strong>去掉/etc/my.cnf配置文件的default-character-set属性</strong></p></blockquote><h4 id="三、处理中文字符乱码"><a href="#三、处理中文字符乱码" class="headerlink" title="三、处理中文字符乱码"></a>三、处理中文字符乱码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'character%'</span>;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | <span class="regexp">/usr/</span>share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line"><span class="number">8</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此时发现character_set_database和 character_set_server都是latin1的编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create database bangkok;</span><br><span class="line">+----------+-----------------------------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                                   |</span><br><span class="line">+----------+-----------------------------------------------------------------------------------+</span><br><span class="line">| bangkok  | CREATE DATABASE <span class="string">`bangkok`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */</span> |</span><br><span class="line">+----------+-----------------------------------------------------------------------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; set  character_set_database = utf8;</span><br><span class="line">mysql&gt; set character_set_server = utf8;</span><br></pre></td></tr></table></figure><p>此时，再执行show variables like ‘char%’;显示的都是utf8；但是重启mysql之后，还是原来未修改的状态。也就是说，刚刚修改的只是当前的session；并没有真正地修改。<br>此时需要配置my.cnf配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="keyword">default</span>-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure></p><p>重启mysql即可。再使用程序插入数据，终于正常了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql是使用非常广泛的关系型数据库，在使用过程中经常会遇到一些问题。&lt;br&gt;本篇记录在mysql启动的过程中遇到的问题，以及mysql数据库中文乱码问题的处理。&lt;br&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://bambooj.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql安装</title>
    <link href="http://bambooj.github.io/2017/04/27/install-mysql/"/>
    <id>http://bambooj.github.io/2017/04/27/install-mysql/</id>
    <published>2017-04-27T01:47:02.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>在linux上面安装和在windows上的安装过程还是有一点区别的，这边文章记录了我个人在linux平台上面安装mysql过程中遇到的一些问题和解决方案。<br><a id="more"></a></p><h4 id="1-下载安装包，mysql57-community-release-el6-9-noarch-rpm"><a href="#1-下载安装包，mysql57-community-release-el6-9-noarch-rpm" class="headerlink" title="1. 下载安装包，mysql57-community-release-el6-9.noarch.rpm"></a>1. 下载安装包，mysql57-community-release-el6-9.noarch.rpm</h4><p>如果下载的安装包放在了window上，需要将安装包上传至linux服务器，可以使用xftp工具从windows put 文件到linux。<br>当然，最简单的还是在linux命令行上面直接&gt; wget mysql57-community-release-el6-9.noarch.rpm；</p><h4 id="2-开始安装-参考官网"><a href="#2-开始安装-参考官网" class="headerlink" title="2. 开始安装 (参考官网)"></a>2. 开始安装 <a href="https://dev.mysql.com/doc/refman/8.0/en/linux-installation-yum-repo.html#yum-repo-installing-mysql" target="_blank" rel="noopener">(参考官网)</a></h4><p>安装仓库 </p><blockquote><p>sudo yum localinstall platform-and-version-specific-package-name.rpm </p></blockquote><p>查看</p><blockquote><p>yum list | grep mysql</p></blockquote><p>安装mysql</p><blockquote><p>yum -y install mysql-community-server</p></blockquote><p><img src="/img/2017/4/clipboard1.png" alt="clipboard1"></p><p>这个时候可能出现截图中的错误，是因为包的兼容性问题，可以先删除mysql依赖<br>删除依赖</p><blockquote><p>yum remove mysql-libs</p></blockquote><p>安装完成</p><p>如果想安装旧版本，如5.5版本，则可以通过yum list mariadb或者yum list mysql 查看有哪些版本可供安装<br>可以直接执行命令<br>yum install mysql<br>或者<br>yum -y install mariadb mariadb-server<br>此时安装的是mysql的一个分支mariadb。mariadb是mysql的一个分支，mysql先后被sun和oracle收购，以防oracle会对mysql做一些认证。</p><h4 id="3-启动mysql服务"><a href="#3-启动mysql服务" class="headerlink" title="3. 启动mysql服务"></a>3. 启动mysql服务</h4><blockquote><p>service mysql start</p></blockquote><h4 id="4-mysql安装启动完成后，自动生成的root密码"><a href="#4-mysql安装启动完成后，自动生成的root密码" class="headerlink" title="4. mysql安装启动完成后，自动生成的root密码"></a>4. mysql安装启动完成后，自动生成的root密码</h4><blockquote><p>vim /var/log/mysqld.log</p></blockquote><p><img src="/img/2017/4/clipboard2.png" alt="clipboard1"><br>或者执行</p><blockquote><p>sudo grep ‘temporary password’ /var/log/mysqld.log</p></blockquote><h4 id="5-重置密码"><a href="#5-重置密码" class="headerlink" title="5. 重置密码"></a>5. 重置密码</h4><p>5.1 先使用初始密码登录<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 网上可能是建议你这样修改的</span><br><span class="line">&gt;mysql -uroot -p</span><br><span class="line"> 密码</span><br><span class="line">&gt;mysql</span><br><span class="line">&gt;use mysql;</span><br><span class="line">&gt;update user set password=passworD(<span class="string">"123456"</span>) where user=<span class="string">'root'</span>;</span><br><span class="line">执行update时，报错：ERROR <span class="number">1046</span> (<span class="number">3</span>D000): No database selected</span><br></pre></td></tr></table></figure></p><p>5.2 使用官网做法</p><blockquote><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘Gz@2017(Kj)’;<br>​&gt;flush privileges;</p></blockquote><p>5.3 直接在shell中执行mysql_secure_installation<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@vultr usr]# mysql_secure_installation</span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MariaDB to secure it, we<span class="string">'ll need the current</span></span><br><span class="line"><span class="string">password for the root user. If you'</span>ve just installed MariaDB, and</span><br><span class="line">you haven<span class="string">'t set the root password yet, the password will be blank,</span></span><br><span class="line"><span class="string">so you should just press enter here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Enter current password for root (enter for none):</span></span><br><span class="line"><span class="string">ERROR 1045 (28000): Access denied for user '</span>root<span class="string">'@'</span>localhost<span class="string">' (using password: YES)</span></span><br><span class="line"><span class="string">Enter current password for root (enter for none):</span></span><br><span class="line"><span class="string">OK, successfully used password, moving on...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Setting the root password ensures that nobody can log into the MariaDB</span></span><br><span class="line"><span class="string">root user without the proper authorisation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set root password? [Y/n] y</span></span><br><span class="line"><span class="string">New password:</span></span><br><span class="line"><span class="string">Re-enter new password:</span></span><br><span class="line"><span class="string">Password updated successfully!</span></span><br><span class="line"><span class="string">Reloading privilege tables..</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">By default, a MariaDB installation has an anonymous user, allowing anyone</span></span><br><span class="line"><span class="string">to log into MariaDB without having to have a user account created for</span></span><br><span class="line"><span class="string">them. This is intended only for testing, and to make the installation</span></span><br><span class="line"><span class="string">go a bit smoother. You should remove them before moving into a</span></span><br><span class="line"><span class="string">production environment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Remove anonymous users? [Y/n] Y</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Normally, root should only be allowed to connect from '</span>localhost<span class="string">'. This</span></span><br><span class="line"><span class="string">ensures that someone cannot guess at the root password from the network.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disallow root login remotely? [Y/n] n</span></span><br><span class="line"><span class="string"> ... skipping.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">By default, MariaDB comes with a database named '</span>test<span class="string">' that anyone can</span></span><br><span class="line"><span class="string">access. This is also intended only for testing, and should be removed</span></span><br><span class="line"><span class="string">before moving into a production environment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Remove test database and access to it? [Y/n] n</span></span><br><span class="line"><span class="string"> ... skipping.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Reloading the privilege tables will ensure that all changes made so far</span></span><br><span class="line"><span class="string">will take effect immediately.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Reload privilege tables now? [Y/n] Y</span></span><br><span class="line"><span class="string"> ... Success!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Cleaning up...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">All done! If you'</span>ve completed all <span class="keyword">of</span> the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks <span class="keyword">for</span> using MariaDB!</span><br><span class="line">[root@vultr usr]#</span><br></pre></td></tr></table></figure></p><h4 id="6-使用可视化工具连接"><a href="#6-使用可视化工具连接" class="headerlink" title="6. 使用可视化工具连接"></a>6. 使用可视化工具连接</h4><p><img src="/img/2017/4/clipboard3.png" alt="clipboard3"><br>发现此时还是不能够登录<br>在window上面telnet ip port一下<br><img src="/img/2017/4/clipboard4.png" alt="clipboard4"></p><p>发现无法telnet到端口<br>因此可以判断是端口没有开放出来。</p><h4 id="7-开放端口号"><a href="#7-开放端口号" class="headerlink" title="7. 开放端口号"></a>7. 开放端口号</h4><p>查看端口状态</p><blockquote><p>service status iptables;</p></blockquote><p>如果是centos7版本，则需要使用systemctl，已经不再支持service命令了。此时命令行会有提示。<br>如果还没有安装防火墙，可以先安装</p><blockquote><p>yum install iptables-services</p></blockquote><p>安装完成后，在查看</p><blockquote><p>systemctl status iptables.service</p></blockquote><p><img src="/img/2017/4/clipboard5.png" alt="clipboard5"><br>说明已经关闭防火墙了</p><h4 id="8-客户端连接"><a href="#8-客户端连接" class="headerlink" title="8. 客户端连接"></a>8. 客户端连接</h4><p>此时如果使用navicat等客户端连接还报错，那么授权一下就可以了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to root@<span class="string">"%"</span> identified by <span class="string">"yourpassword"</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p>其实执行<strong>grant all privileges on <em>.</em> to root@”%” identified by “yourpassword”;</strong> 就相当与执行<br><strong>insert into mysql.user(Host,User,Password) values(“%”,”root”,password(“yourpassword”));</strong> 也就是往mysql.user插入一条数据。<br>可以通过 <strong>select Host ,User , Password from user;</strong> 查看效果。</p><h4 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h4><p>总之，安装的过程最好还是按着官网的来。安装过程也因各个linux版本不同而不同。</p><h4 id="10-补充部分"><a href="#10-补充部分" class="headerlink" title="10. 补充部分"></a>10. 补充部分</h4><p>上述步骤都完成之后，我在windows用navicat远程连接root，创建一个用户user1，然后给他授权一个刚创建的数据库db1.但是提交的时候失败了。<br>接着，又使用user1试着去连接，还是报错，连接不上；登录服务器使用mysql -uuser1 -p user1password又可以正常连接。<br>于是查了资料，发现在授权的时候需要加一个with grant option；也就是</p><blockquote><p>grant all privileges on db1.<em> to user1@’%’ identified by ‘user1password’ </em>with grant option*;</p></blockquote><p>with grant option 的 作用可以参考官网文档；这里简单理解为使用了这个参数之后，就可以就行远程连接了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在linux上面安装和在windows上的安装过程还是有一点区别的，这边文章记录了我个人在linux平台上面安装mysql过程中遇到的一些问题和解决方案。&lt;br&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://bambooj.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>薪资扣税算法</title>
    <link href="http://bambooj.github.io/2017/04/24/salary/"/>
    <id>http://bambooj.github.io/2017/04/24/salary/</id>
    <published>2017-04-24T15:21:56.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-计算方法"><a href="#1-计算方法" class="headerlink" title="1. 计算方法"></a>1. 计算方法</h4><p>应纳税所得额 = 工资收入金额 － 各项社会保险费 － 起征点(3500元)<br>应纳税额 = 应纳税所得额 x 税率 － 速算扣除数</p><p><img src="/img/salary.jpg" alt="/img/salary.jpg"></p><h4 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h4><p>如基本工资4000，加上补贴1200,则公司需要给你发5200元，假设各项社会保险扣除500</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">则扣税计算方法：</span><br><span class="line">应缴纳所得税 = <span class="number">5200</span> - <span class="number">500</span> - <span class="number">3500</span> = <span class="number">1200</span></span><br><span class="line"><span class="number">1200</span>在<span class="number">2</span>级数</span><br><span class="line">应纳税额 = <span class="number">1200</span> * <span class="number">10</span>% - <span class="number">105</span> = <span class="number">15</span> 元</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-计算方法&quot;&gt;&lt;a href=&quot;#1-计算方法&quot; class=&quot;headerlink&quot; title=&quot;1. 计算方法&quot;&gt;&lt;/a&gt;1. 计算方法&lt;/h4&gt;&lt;p&gt;应纳税所得额 = 工资收入金额 － 各项社会保险费 － 起征点(3500元)&lt;br&gt;应纳税额 = 应纳税
      
    
    </summary>
    
    
      <category term="生活" scheme="http://bambooj.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>http请求状态码</title>
    <link href="http://bambooj.github.io/2017/04/24/http-status-code/"/>
    <id>http://bambooj.github.io/2017/04/24/http-status-code/</id>
    <published>2017-04-24T15:10:08.000Z</published>
    <updated>2018-08-07T04:11:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>当用户试图通过 HTTP 访问一台正在运行 Internet 信息服务 (IIS) 的服务器上的内容时，IIS 返回一个表示该请求的状态的数字代码。状态代码可以指明具体请求是否已成功，还可以揭示请求失败的确切原因。<br><a id="more"></a></p><h4 id="1-1xx-信息提示"><a href="#1-1xx-信息提示" class="headerlink" title="1. 1xx - 信息提示"></a>1. 1xx - 信息提示</h4><p>这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个 1xx 响应。</p><ul><li>100 - Continue 初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）</li><li>101 - Switching Protocols 服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）</li></ul><h4 id="2-2xx-成功"><a href="#2-2xx-成功" class="headerlink" title="2. 2xx - 成功"></a>2. 2xx - 成功</h4><p>这类状态代码表明服务器成功地接受了客户端请求。</p><ul><li>200 - OK 一切正常，对GET和POST请求的应答文档跟在后面。</li><li>201 - Created 服务器已经创建了文档，Location头给出了它的URL。</li><li>202 - Accepted 已经接受请求，但处理尚未完成。</li><li>203 - Non-Authoritative Information 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝，非权威性信息（HTTP 1.1新）。</li><li>204 - No Content 没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</li><li>205 - Reset Content 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。</li><li>206 - Partial Content 客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。</li></ul><h4 id="3-3xx-重定向"><a href="#3-3xx-重定向" class="headerlink" title="3. 3xx - 重定向"></a>3. 3xx - 重定向</h4><p>客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。</p><ul><li>300 - Multiple Choices 客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</li><li>301 - Moved Permanently 客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</li><li>302 - Found 类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求 <a href="http://host/~user" target="_blank" rel="noopener">http://host/~user</a> （缺少了后面的斜杠），有的服务器返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见 307。</li><li>303 - See Other 类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。</li><li>304 - Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</li><li>305 - Use Proxy 客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。</li><li>307 - Temporary Redirect 和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向。（HTTP 1.1新）</li></ul><h4 id="4-4xx-客户端错误"><a href="#4-4xx-客户端错误" class="headerlink" title="4. 4xx - 客户端错误"></a>4. 4xx - 客户端错误</h4><p>发生错误，客户端似乎有问题。例如，客户端请求不存在的页面，客户端未提供有效的身份验证信息。</p><ul><li>400 - Bad Request 请求出现语法错误。</li><li>401 - Unauthorized 访问被拒绝，客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求。IIS 定义了许多不同的 401 错误，它们指明更为具体的错误原因。这些具体的错误代码在浏览器中显示，但不在 IIS 日志中显示：</li><li>401.1 - 登录失败。</li><li>401.2 - 服务器配置导致登录失败。</li><li>401.3 - 由于 ACL 对资源的限制而未获得授权。</li><li>401.4 - 筛选器授权失败。</li><li>401.5 - ISAPI/CGI 应用程序授权失败。</li><li>401.7 – 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</li><li>403 - Forbidden 资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。禁止访问：IIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：</li><li>403.1 - 执行访问被禁止。</li><li>403.2 - 读访问被禁止。</li><li>403.3 - 写访问被禁止。</li><li>403.4 - 要求 SSL。</li><li>403.5 - 要求 SSL 128。</li><li>403.6 - IP 地址被拒绝。</li><li>403.7 - 要求客户端证书。</li><li>403.8 - 站点访问被拒绝。</li><li>403.9 - 用户数过多。</li><li>403.10 - 配置无效。</li><li>403.11 - 密码更改。</li><li>403.12 - 拒绝访问映射表。</li><li>403.13 - 客户端证书被吊销。</li><li>403.14 - 拒绝目录列表。</li><li>403.15 - 超出客户端访问许可。</li><li>403.16 - 客户端证书不受信任或无效。</li><li>403.17 - 客户端证书已过期或尚未生效。</li><li>403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。</li><li>403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</li><li>403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</li><li>404 - Not Found 无法找到指定位置的资源。这也是一个常用的应答。</li><li>404.0 -（无） – 没有找到文件或目录。</li><li>404.1 - 无法在所请求的端口上访问 Web 站点。</li><li>404.2 - Web 服务扩展锁定策略阻止本请求。</li><li>404.3 - MIME 映射策略阻止本请求。</li><li>405 - Method Not Allowed 请求方法（GET、POST、HEAD、Delete、PUT、TRACE等）对指定的资源不适用，用来访问本页面的 HTTP 谓词不被允许（方法不被允许）（HTTP 1.1新）</li><li>406 - Not Acceptable 指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容，客户端浏览器不接受所请求页面的 MIME 类型（HTTP 1.1新）。</li><li>407 - Proxy Authentication Required 要求进行代理身份验证，类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）</li><li>408 - Request Timeout 在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）</li><li>409 - Conflict 通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）</li><li>410 - Gone 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知的原因文档不可用。（HTTP 1.1新）</li><li>411 - Length Required 服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）</li><li>412 - Precondition Failed 请求头中指定的一些前提条件失败（HTTP 1.1新）。</li><li>413 – Request Entity Too Large 目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。</li><li>414 - Request URI Too Long URI太长（HTTP 1.1新）。</li><li>415 – 不支持的媒体类型。</li><li>416 – Requested Range Not Satisfiable 服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）</li><li>417 – 执行失败。</li><li>423 – 锁定的错误。</li></ul><h4 id="5-5xx-服务器错误"><a href="#5-5xx-服务器错误" class="headerlink" title="5. 5xx - 服务器错误"></a>5. 5xx - 服务器错误</h4><p>服务器由于遇到错误而不能完成该请求。</p><ul><li>500 - Internal Server Error 服务器遇到了意料不到的情况，不能完成客户的请求。</li><li>500.12 - 应用程序正忙于在 Web 服务器上重新启动。</li><li>500.13 - Web 服务器太忙。</li><li>500.15 - 不允许直接请求 Global.asa。</li><li>500.16 – UNC 授权凭据不正确。这个错误代码为 IIS 6.0 所专用。</li><li>500.18 – URL 授权存储不能打开。这个错误代码为 IIS 6.0 所专用。</li><li>500.100 - 内部 ASP 错误。</li><li>501 - Not Implemented 服务器不支持实现请求所需要的功能，页眉值指定了未实现的配置。例如，客户发出了一个服务器不支持的PUT请求。</li><li>502 - Bad Gateway 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。 亦说Web 服务器用作网关或代理服务器时收到了无效响应。</li><li>502.1 - CGI 应用程序超时。</li><li>502.2 - CGI 应用程序出错。</li><li>503 - Service Unavailable 服务不可用，服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。这个错误代码为 IIS 6.0 所专用。</li><li>504 - Gateway Timeout 网关超时，由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新） 。</li><li>505 - HTTP Version Not Supported 服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当用户试图通过 HTTP 访问一台正在运行 Internet 信息服务 (IIS) 的服务器上的内容时，IIS 返回一个表示该请求的状态的数字代码。状态代码可以指明具体请求是否已成功，还可以揭示请求失败的确切原因。&lt;br&gt;
    
    </summary>
    
    
      <category term="http" scheme="http://bambooj.github.io/tags/http/"/>
    
  </entry>
  
</feed>
